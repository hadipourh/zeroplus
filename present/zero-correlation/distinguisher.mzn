/*
MIT License

Copyright (c) 2023 Hosein Hadipour

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

int: RD;
constraint assert(RD >= 0, "Invalid value for RD: " ++
         "RD must be greater than or equal to 0");

% #############################################################################################################################################
% #############################################################################################################################################
% #############################################################################################################################################
%  ____          __  _                _                   _                    _____       _      _            
% |  _ \   ___  / _|(_) _ __    ___  | |     ___    ___  | | __ _   _  _ __   |_   _|__ _ | |__  | |  ___  ___ 
% | | | | / _ \| |_ | || '_ \  / _ \ | |    / _ \  / _ \ | |/ /| | | || '_ \    | | / _` || '_ \ | | / _ \/ __|
% | |_| ||  __/|  _|| || | | ||  __/ | |___| (_) || (_) ||   < | |_| || |_) |   | || (_| || |_) || ||  __/\__ \
% |____/  \___||_|  |_||_| |_| \___| |_____|\___/  \___/ |_|\_\ \__,_|| .__/    |_| \__,_||_.__/ |_| \___||___/
%                                                                     |_|                                      
% define lookup tables

array[0..63] of int: round_permutation = array1d(0..63, [0, 16, 32, 48, 1, 17, 33, 49, 2, 18, 34, 50, 3, 19, 35, 51, 4, 20, 36, 52, 5, 21, 37, 53, 6, 22, 38, 54, 7, 23, 39, 55, 8, 24, 40, 56, 9, 25, 41, 57, 10, 26, 42, 58, 11, 27, 43, 59, 12, 28, 44, 60, 13, 29, 45, 61, 14, 30, 46, 62, 15, 31, 47, 63]);

% #############################################################################################################################################
% #############################################################################################################################################
% #############################################################################################################################################
%   ____                    _                _         _           __                _____  _   _ 
%  / ___| ___   _ __   ___ | |_  _ __  __ _ (_) _ __  | |_  ___   / _|  ___   _ __  | ____|| | | |
% | |    / _ \ | '_ \ / __|| __|| '__|/ _` || || '_ \ | __|/ __| | |_  / _ \ | '__| |  _|  | | | |
% | |___| (_) || | | |\__ \| |_ | |  | (_| || || | | || |_ \__ \ |  _|| (_) || |    | |___ | |_| |
%  \____|\___/ |_| |_||___/ \__||_|   \__,_||_||_| |_| \__||___/ |_|   \___/ |_|    |_____| \___/ 
% constraints for EU

array[0..RD, 0..63] of var -1..1: xu;
array[0..(RD - 1), 0..63] of var -1..1: yu;

% S-box layer
constraint forall(round in 0..(RD - 1), i in 0..15)
(
    sbox(xu[round, 4*i], xu[round, 4*i + 1], xu[round, 4*i + 2], xu[round, 4*i + 3], 
         yu[round, 4*i], yu[round, 4*i + 1], yu[round, 4*i + 2], yu[round, 4*i + 3])
);

% Diffusion layer
constraint forall(round in 0..(RD - 1), i in 0..63)
(
    xu[round + 1, round_permutation[i]] = yu[round, i]
);

constraint sum(i in 0..63) (xu[0, i]) != 0;
% #############################################################################################################################################
% #############################################################################################################################################
% #############################################################################################################################################
%   ____                    _                _         _           __                _____  _     
%  / ___| ___   _ __   ___ | |_  _ __  __ _ (_) _ __  | |_  ___   / _|  ___   _ __  | ____|| |    
% | |    / _ \ | '_ \ / __|| __|| '__|/ _` || || '_ \ | __|/ __| | |_  / _ \ | '__| |  _|  | |    
% | |___| (_) || | | |\__ \| |_ | |  | (_| || || | | || |_ \__ \ |  _|| (_) || |    | |___ | |___ 
%  \____|\___/ |_| |_||___/ \__||_|   \__,_||_||_| |_| \__||___/ |_|   \___/ |_|    |_____||_____|
% constraints for EL

array[0..RD, 0..63] of var -1..1: xl;
array[0..(RD - 1), 0..63] of var -1..1: yl;

% S-box layer
constraint forall(round in 0..(RD - 1), i in 0..15)
(
    sbox_inv(yl[round, 4*i], yl[round, 4*i + 1], yl[round, 4*i + 2], yl[round, 4*i + 3], 
             xl[round, 4*i], xl[round, 4*i + 1], xl[round, 4*i + 2], xl[round, 4*i + 3])
);

% Diffusion layer
constraint forall(round in 0..(RD - 1), i in 0..63)
(
    yl[round, i] = xl[round + 1, round_permutation[i]]
);

constraint sum(i in 0..63)(xl[RD, i]) != 0;

% #############################################################################################################################################
% #############################################################################################################################################
% #############################################################################################################################################
%   ____                                   _                _    _              ____               _                    _  _        _    _               
%  / ___| _   _   __ _  _ __  __ _  _ __  | |_  ___   ___  | |_ | |__    ___   / ___| ___   _ __  | |_  _ __  __ _   __| |(_)  ___ | |_ (_)  ___   _ __  
% | |  _ | | | | / _` || '__|/ _` || '_ \ | __|/ _ \ / _ \ | __|| '_ \  / _ \ | |    / _ \ | '_ \ | __|| '__|/ _` | / _` || | / __|| __|| | / _ \ | '_ \ 
% | |_| || |_| || (_| || |  | (_| || | | || |_|  __/|  __/ | |_ | | | ||  __/ | |___| (_) || | | || |_ | |  | (_| || (_| || || (__ | |_ | || (_) || | | |
%  \____| \__,_| \__,_||_|   \__,_||_| |_| \__|\___| \___|  \__||_| |_| \___|  \____|\___/ |_| |_| \__||_|   \__,_| \__,_||_| \___| \__||_| \___/ |_| |_|
%                                                                                                                                        |___/                              
% constraints for the meeting point
array[0..RD, 0..63] of var 0..1: contradictx;
constraint forall(round in 0..RD, i in 0..63)
(
    contradictx[round, i] = bool2int(xu[round, i] + xl[round, i] == 1)
);
array[0..(RD - 1), 0..63] of var 0..1: contradicty;
constraint forall(round in 0..(RD - 1), i in 0..63)
(
    contradicty[round, i] = bool2int(yu[round, i] + yl[round, i] == 1)
);

constraint sum(round in 0..RD, i in 0..63)(contradictx[round, i]) >= 1;
constraint sum(round in 0..(RD - 1), i in 0..63)(contradicty[round, i]) >= 1;

var 0..64: num_non_fixed_input_bits; 
constraint num_non_fixed_input_bits = sum(i in 0..63)(bool2int(xu[0, i] == -1));
var 0..64: num_non_fixed_output_bits; 
constraint num_non_fixed_output_bits = sum(i in 0..63)(bool2int(xl[RD, i] == -1));

% #############################################################################################################################################
% #############################################################################################################################################
% #############################################################################################################################################
%  ____                           _       ____   _                _                      
% / ___|   ___   __ _  _ __  ___ | |__   / ___| | |_  _ __  __ _ | |_  ___   __ _  _   _ 
% \___ \  / _ \ / _` || '__|/ __|| '_ \  \___ \ | __|| '__|/ _` || __|/ _ \ / _` || | | |
%  ___) ||  __/| (_| || |  | (__ | | | |  ___) || |_ | |  | (_| || |_|  __/| (_| || |_| |
% |____/  \___| \__,_||_|   \___||_| |_| |____/  \__||_|   \__,_| \__|\___| \__, | \__, |
%                                                                           |___/  |___/ 
% Search strategy
ann: search_ann;
search_ann = seq_search([
    int_search([yl[RD - 1, i] | i in 0..63], indomain_median, complete)]);

% #############################################################################################################################################
% #############################################################################################################################################
% #############################################################################################################################################
%  ____          _             
% / ___|   ___  | |__   __ ___ 
% \___ \  / _ \ | |\ \ / // _ \
%  ___) || (_) || | \ V /|  __/
% |____/  \___/ |_|  \_/  \___|

% some artificial constraints to control the input and output masks

solve minimize sum(i in 0..63)(xu[0, i] + xl[RD, i]);
% solve :: restart_constant(10000)
%       :: search_ann minimize sum(i in 0..63)(xu[0, i]);

% #############################################################################################################################################
% #############################################################################################################################################
% #############################################################################################################################################
%     _                 _  _  _                       _____                     _    _                    
%    / \   _   _ __  __(_)| |(_)  __ _  _ __  _   _  |  ___|_   _  _ __    ___ | |_ (_)  ___   _ __   ___ 
%   / _ \ | | | |\ \/ /| || || | / _` || '__|| | | | | |_  | | | || '_ \  / __|| __|| | / _ \ | '_ \ / __|
%  / ___ \| |_| | >  < | || || || (_| || |   | |_| | |  _| | |_| || | | || (__ | |_ | || (_) || | | |\__ \
% /_/   \_\\__,_|/_/\_\|_||_||_| \__,_||_|    \__, | |_|    \__,_||_| |_| \___| \__||_| \___/ |_| |_||___/
%                                             |___/       
% auxiliary functions

predicate sbox(var -1..1: x3, var -1..1: x2, var -1..1: x1, var -1..1: x0, var -1..1: y3, var -1..1: y2, var -1..1: y1, var -1..1: y0) = 
    if (x3 == 0 /\ x2 == 0 /\ x1 == 0 /\ x0 == 0) then (y3 == 0 /\ y2 == 0 /\ y1 == 0 /\ y0 == 0)
    elseif (x3 == 0 /\ x2 == 0 /\ x1 == 0 /\ x0 == 1) then (y3 == -1 /\ y2 == 1 /\ y1 == -1 /\ y0 == 1)
    else (y3 = -1 /\ y2 = -1 /\ y1 = -1 /\ y0 = -1)
    endif
;

predicate sbox_inv(var -1..1: x3, var -1..1: x2, var -1..1: x1, var -1..1: x0, var -1..1: y3, var -1..1: y2, var -1..1: y1, var -1..1: y0) = 
    if (x3 == 0 /\ x2 == 0 /\ x1 == 0 /\ x0 == 0) then (y3 == 0 /\ y2 == 0 /\ y1 == 0 /\ y0 == 0)
    elseif (x3 == 0 /\ x2 == 0 /\ x1 == 0 /\ x0 == 1) then (y3 == 1 /\ y2 == -1 /\ y1 == -1 /\ y0 == 1)
    elseif (x3 == 1 /\ x2 == 0 /\ x1 == 1 /\ x0 == 0) then (y3 == -1 /\ y2 == -1 /\ y1 == -1 /\ y0 == 1)
    elseif (x3 == 1 /\ x2 == 0 /\ x1 == 1 /\ x0 == 1) then (y3 == -1 /\ y2 == -1 /\ y1 == -1 /\ y0 == 0)
    else (y3 = -1 /\ y2 = -1 /\ y1 = -1 /\ y0 = -1)
    endif
;