/*
MIT License

Copyright (c) 2023 Hosein Hadipour

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

int: RD;
constraint assert(RD >= 0, "Invalid value for RD: " ++
         "RD must be greater than or equal to 0");

% #############################################################################################################################################
% #############################################################################################################################################
% #############################################################################################################################################
%  ____          __  _                _                   _                    _____       _      _            
% |  _ \   ___  / _|(_) _ __    ___  | |     ___    ___  | | __ _   _  _ __   |_   _|__ _ | |__  | |  ___  ___ 
% | | | | / _ \| |_ | || '_ \  / _ \ | |    / _ \  / _ \ | |/ /| | | || '_ \    | | / _` || '_ \ | | / _ \/ __|
% | |_| ||  __/|  _|| || | | ||  __/ | |___| (_) || (_) ||   < | |_| || |_) |   | || (_| || |_) || ||  __/\__ \
% |____/  \___||_|  |_||_| |_| \___| |_____|\___/  \___/ |_|\_\ \__,_|| .__/    |_| \__,_||_.__/ |_| \___||___/
%                                                                     |_|                                      
% define lookup tables

array[0..4, 0..1] of int: rotation_dictionary = array2d(0..4, 0..1,
[
    19, 28,
    61, 39,
    1, 6,
    10, 17,
    7, 41
]);

array[0..63, 0..30] of int: inv_lin_state_row_0 = array2d(0..63, 0..30,
[
0, 1, 4, 7, 11, 14, 17, 19, 20, 22, 23, 25, 26, 28, 31, 34, 37, 39, 40, 42, 43, 45, 46, 47, 49, 50, 52, 53, 55, 58, 61, 
1, 2, 5, 8, 12, 15, 18, 20, 21, 23, 24, 26, 27, 29, 32, 35, 38, 40, 41, 43, 44, 46, 47, 48, 50, 51, 53, 54, 56, 59, 62, 
2, 3, 6, 9, 13, 16, 19, 21, 22, 24, 25, 27, 28, 30, 33, 36, 39, 41, 42, 44, 45, 47, 48, 49, 51, 52, 54, 55, 57, 60, 63, 
0, 3, 4, 7, 10, 14, 17, 20, 22, 23, 25, 26, 28, 29, 31, 34, 37, 40, 42, 43, 45, 46, 48, 49, 50, 52, 53, 55, 56, 58, 61, 
1, 4, 5, 8, 11, 15, 18, 21, 23, 24, 26, 27, 29, 30, 32, 35, 38, 41, 43, 44, 46, 47, 49, 50, 51, 53, 54, 56, 57, 59, 62, 
2, 5, 6, 9, 12, 16, 19, 22, 24, 25, 27, 28, 30, 31, 33, 36, 39, 42, 44, 45, 47, 48, 50, 51, 52, 54, 55, 57, 58, 60, 63, 
0, 3, 6, 7, 10, 13, 17, 20, 23, 25, 26, 28, 29, 31, 32, 34, 37, 40, 43, 45, 46, 48, 49, 51, 52, 53, 55, 56, 58, 59, 61, 
1, 4, 7, 8, 11, 14, 18, 21, 24, 26, 27, 29, 30, 32, 33, 35, 38, 41, 44, 46, 47, 49, 50, 52, 53, 54, 56, 57, 59, 60, 62, 
2, 5, 8, 9, 12, 15, 19, 22, 25, 27, 28, 30, 31, 33, 34, 36, 39, 42, 45, 47, 48, 50, 51, 53, 54, 55, 57, 58, 60, 61, 63, 
0, 3, 6, 9, 10, 13, 16, 20, 23, 26, 28, 29, 31, 32, 34, 35, 37, 40, 43, 46, 48, 49, 51, 52, 54, 55, 56, 58, 59, 61, 62, 
1, 4, 7, 10, 11, 14, 17, 21, 24, 27, 29, 30, 32, 33, 35, 36, 38, 41, 44, 47, 49, 50, 52, 53, 55, 56, 57, 59, 60, 62, 63, 
0, 2, 5, 8, 11, 12, 15, 18, 22, 25, 28, 30, 31, 33, 34, 36, 37, 39, 42, 45, 48, 50, 51, 53, 54, 56, 57, 58, 60, 61, 63, 
0, 1, 3, 6, 9, 12, 13, 16, 19, 23, 26, 29, 31, 32, 34, 35, 37, 38, 40, 43, 46, 49, 51, 52, 54, 55, 57, 58, 59, 61, 62, 
1, 2, 4, 7, 10, 13, 14, 17, 20, 24, 27, 30, 32, 33, 35, 36, 38, 39, 41, 44, 47, 50, 52, 53, 55, 56, 58, 59, 60, 62, 63, 
0, 2, 3, 5, 8, 11, 14, 15, 18, 21, 25, 28, 31, 33, 34, 36, 37, 39, 40, 42, 45, 48, 51, 53, 54, 56, 57, 59, 60, 61, 63, 
0, 1, 3, 4, 6, 9, 12, 15, 16, 19, 22, 26, 29, 32, 34, 35, 37, 38, 40, 41, 43, 46, 49, 52, 54, 55, 57, 58, 60, 61, 62, 
1, 2, 4, 5, 7, 10, 13, 16, 17, 20, 23, 27, 30, 33, 35, 36, 38, 39, 41, 42, 44, 47, 50, 53, 55, 56, 58, 59, 61, 62, 63, 
0, 2, 3, 5, 6, 8, 11, 14, 17, 18, 21, 24, 28, 31, 34, 36, 37, 39, 40, 42, 43, 45, 48, 51, 54, 56, 57, 59, 60, 62, 63, 
0, 1, 3, 4, 6, 7, 9, 12, 15, 18, 19, 22, 25, 29, 32, 35, 37, 38, 40, 41, 43, 44, 46, 49, 52, 55, 57, 58, 60, 61, 63, 
0, 1, 2, 4, 5, 7, 8, 10, 13, 16, 19, 20, 23, 26, 30, 33, 36, 38, 39, 41, 42, 44, 45, 47, 50, 53, 56, 58, 59, 61, 62, 
1, 2, 3, 5, 6, 8, 9, 11, 14, 17, 20, 21, 24, 27, 31, 34, 37, 39, 40, 42, 43, 45, 46, 48, 51, 54, 57, 59, 60, 62, 63, 
0, 2, 3, 4, 6, 7, 9, 10, 12, 15, 18, 21, 22, 25, 28, 32, 35, 38, 40, 41, 43, 44, 46, 47, 49, 52, 55, 58, 60, 61, 63, 
0, 1, 3, 4, 5, 7, 8, 10, 11, 13, 16, 19, 22, 23, 26, 29, 33, 36, 39, 41, 42, 44, 45, 47, 48, 50, 53, 56, 59, 61, 62, 
1, 2, 4, 5, 6, 8, 9, 11, 12, 14, 17, 20, 23, 24, 27, 30, 34, 37, 40, 42, 43, 45, 46, 48, 49, 51, 54, 57, 60, 62, 63, 
0, 2, 3, 5, 6, 7, 9, 10, 12, 13, 15, 18, 21, 24, 25, 28, 31, 35, 38, 41, 43, 44, 46, 47, 49, 50, 52, 55, 58, 61, 63, 
0, 1, 3, 4, 6, 7, 8, 10, 11, 13, 14, 16, 19, 22, 25, 26, 29, 32, 36, 39, 42, 44, 45, 47, 48, 50, 51, 53, 56, 59, 62, 
1, 2, 4, 5, 7, 8, 9, 11, 12, 14, 15, 17, 20, 23, 26, 27, 30, 33, 37, 40, 43, 45, 46, 48, 49, 51, 52, 54, 57, 60, 63, 
0, 2, 3, 5, 6, 8, 9, 10, 12, 13, 15, 16, 18, 21, 24, 27, 28, 31, 34, 38, 41, 44, 46, 47, 49, 50, 52, 53, 55, 58, 61, 
1, 3, 4, 6, 7, 9, 10, 11, 13, 14, 16, 17, 19, 22, 25, 28, 29, 32, 35, 39, 42, 45, 47, 48, 50, 51, 53, 54, 56, 59, 62, 
2, 4, 5, 7, 8, 10, 11, 12, 14, 15, 17, 18, 20, 23, 26, 29, 30, 33, 36, 40, 43, 46, 48, 49, 51, 52, 54, 55, 57, 60, 63, 
0, 3, 5, 6, 8, 9, 11, 12, 13, 15, 16, 18, 19, 21, 24, 27, 30, 31, 34, 37, 41, 44, 47, 49, 50, 52, 53, 55, 56, 58, 61, 
1, 4, 6, 7, 9, 10, 12, 13, 14, 16, 17, 19, 20, 22, 25, 28, 31, 32, 35, 38, 42, 45, 48, 50, 51, 53, 54, 56, 57, 59, 62, 
2, 5, 7, 8, 10, 11, 13, 14, 15, 17, 18, 20, 21, 23, 26, 29, 32, 33, 36, 39, 43, 46, 49, 51, 52, 54, 55, 57, 58, 60, 63, 
0, 3, 6, 8, 9, 11, 12, 14, 15, 16, 18, 19, 21, 22, 24, 27, 30, 33, 34, 37, 40, 44, 47, 50, 52, 53, 55, 56, 58, 59, 61, 
1, 4, 7, 9, 10, 12, 13, 15, 16, 17, 19, 20, 22, 23, 25, 28, 31, 34, 35, 38, 41, 45, 48, 51, 53, 54, 56, 57, 59, 60, 62, 
2, 5, 8, 10, 11, 13, 14, 16, 17, 18, 20, 21, 23, 24, 26, 29, 32, 35, 36, 39, 42, 46, 49, 52, 54, 55, 57, 58, 60, 61, 63, 
0, 3, 6, 9, 11, 12, 14, 15, 17, 18, 19, 21, 22, 24, 25, 27, 30, 33, 36, 37, 40, 43, 47, 50, 53, 55, 56, 58, 59, 61, 62, 
1, 4, 7, 10, 12, 13, 15, 16, 18, 19, 20, 22, 23, 25, 26, 28, 31, 34, 37, 38, 41, 44, 48, 51, 54, 56, 57, 59, 60, 62, 63, 
0, 2, 5, 8, 11, 13, 14, 16, 17, 19, 20, 21, 23, 24, 26, 27, 29, 32, 35, 38, 39, 42, 45, 49, 52, 55, 57, 58, 60, 61, 63, 
0, 1, 3, 6, 9, 12, 14, 15, 17, 18, 20, 21, 22, 24, 25, 27, 28, 30, 33, 36, 39, 40, 43, 46, 50, 53, 56, 58, 59, 61, 62, 
1, 2, 4, 7, 10, 13, 15, 16, 18, 19, 21, 22, 23, 25, 26, 28, 29, 31, 34, 37, 40, 41, 44, 47, 51, 54, 57, 59, 60, 62, 63, 
0, 2, 3, 5, 8, 11, 14, 16, 17, 19, 20, 22, 23, 24, 26, 27, 29, 30, 32, 35, 38, 41, 42, 45, 48, 52, 55, 58, 60, 61, 63, 
0, 1, 3, 4, 6, 9, 12, 15, 17, 18, 20, 21, 23, 24, 25, 27, 28, 30, 31, 33, 36, 39, 42, 43, 46, 49, 53, 56, 59, 61, 62, 
1, 2, 4, 5, 7, 10, 13, 16, 18, 19, 21, 22, 24, 25, 26, 28, 29, 31, 32, 34, 37, 40, 43, 44, 47, 50, 54, 57, 60, 62, 63, 
0, 2, 3, 5, 6, 8, 11, 14, 17, 19, 20, 22, 23, 25, 26, 27, 29, 30, 32, 33, 35, 38, 41, 44, 45, 48, 51, 55, 58, 61, 63, 
0, 1, 3, 4, 6, 7, 9, 12, 15, 18, 20, 21, 23, 24, 26, 27, 28, 30, 31, 33, 34, 36, 39, 42, 45, 46, 49, 52, 56, 59, 62, 
1, 2, 4, 5, 7, 8, 10, 13, 16, 19, 21, 22, 24, 25, 27, 28, 29, 31, 32, 34, 35, 37, 40, 43, 46, 47, 50, 53, 57, 60, 63, 
0, 2, 3, 5, 6, 8, 9, 11, 14, 17, 20, 22, 23, 25, 26, 28, 29, 30, 32, 33, 35, 36, 38, 41, 44, 47, 48, 51, 54, 58, 61, 
1, 3, 4, 6, 7, 9, 10, 12, 15, 18, 21, 23, 24, 26, 27, 29, 30, 31, 33, 34, 36, 37, 39, 42, 45, 48, 49, 52, 55, 59, 62, 
2, 4, 5, 7, 8, 10, 11, 13, 16, 19, 22, 24, 25, 27, 28, 30, 31, 32, 34, 35, 37, 38, 40, 43, 46, 49, 50, 53, 56, 60, 63, 
0, 3, 5, 6, 8, 9, 11, 12, 14, 17, 20, 23, 25, 26, 28, 29, 31, 32, 33, 35, 36, 38, 39, 41, 44, 47, 50, 51, 54, 57, 61, 
1, 4, 6, 7, 9, 10, 12, 13, 15, 18, 21, 24, 26, 27, 29, 30, 32, 33, 34, 36, 37, 39, 40, 42, 45, 48, 51, 52, 55, 58, 62, 
2, 5, 7, 8, 10, 11, 13, 14, 16, 19, 22, 25, 27, 28, 30, 31, 33, 34, 35, 37, 38, 40, 41, 43, 46, 49, 52, 53, 56, 59, 63, 
0, 3, 6, 8, 9, 11, 12, 14, 15, 17, 20, 23, 26, 28, 29, 31, 32, 34, 35, 36, 38, 39, 41, 42, 44, 47, 50, 53, 54, 57, 60, 
1, 4, 7, 9, 10, 12, 13, 15, 16, 18, 21, 24, 27, 29, 30, 32, 33, 35, 36, 37, 39, 40, 42, 43, 45, 48, 51, 54, 55, 58, 61, 
2, 5, 8, 10, 11, 13, 14, 16, 17, 19, 22, 25, 28, 30, 31, 33, 34, 36, 37, 38, 40, 41, 43, 44, 46, 49, 52, 55, 56, 59, 62, 
3, 6, 9, 11, 12, 14, 15, 17, 18, 20, 23, 26, 29, 31, 32, 34, 35, 37, 38, 39, 41, 42, 44, 45, 47, 50, 53, 56, 57, 60, 63, 
0, 4, 7, 10, 12, 13, 15, 16, 18, 19, 21, 24, 27, 30, 32, 33, 35, 36, 38, 39, 40, 42, 43, 45, 46, 48, 51, 54, 57, 58, 61, 
1, 5, 8, 11, 13, 14, 16, 17, 19, 20, 22, 25, 28, 31, 33, 34, 36, 37, 39, 40, 41, 43, 44, 46, 47, 49, 52, 55, 58, 59, 62, 
2, 6, 9, 12, 14, 15, 17, 18, 20, 21, 23, 26, 29, 32, 34, 35, 37, 38, 40, 41, 42, 44, 45, 47, 48, 50, 53, 56, 59, 60, 63, 
0, 3, 7, 10, 13, 15, 16, 18, 19, 21, 22, 24, 27, 30, 33, 35, 36, 38, 39, 41, 42, 43, 45, 46, 48, 49, 51, 54, 57, 60, 61, 
1, 4, 8, 11, 14, 16, 17, 19, 20, 22, 23, 25, 28, 31, 34, 36, 37, 39, 40, 42, 43, 44, 46, 47, 49, 50, 52, 55, 58, 61, 62, 
2, 5, 9, 12, 15, 17, 18, 20, 21, 23, 24, 26, 29, 32, 35, 37, 38, 40, 41, 43, 44, 45, 47, 48, 50, 51, 53, 56, 59, 62, 63, 
0, 3, 6, 10, 13, 16, 18, 19, 21, 22, 24, 25, 27, 30, 33, 36, 38, 39, 41, 42, 44, 45, 46, 48, 49, 51, 52, 54, 57, 60, 63
]
);
array[0..63, 0..32] of int: inv_lin_state_row_1 = array2d(0..63, 0..32,
[
0, 3, 4, 7, 9, 10, 11, 13, 16, 17, 19, 20, 21, 25, 29, 34, 35, 36, 37, 39, 40, 41, 43, 45, 48, 50, 51, 53, 56, 60, 61, 62, 63, 
0, 1, 4, 5, 8, 10, 11, 12, 14, 17, 18, 20, 21, 22, 26, 30, 35, 36, 37, 38, 40, 41, 42, 44, 46, 49, 51, 52, 54, 57, 61, 62, 63, 
0, 1, 2, 5, 6, 9, 11, 12, 13, 15, 18, 19, 21, 22, 23, 27, 31, 36, 37, 38, 39, 41, 42, 43, 45, 47, 50, 52, 53, 55, 58, 62, 63, 
0, 1, 2, 3, 6, 7, 10, 12, 13, 14, 16, 19, 20, 22, 23, 24, 28, 32, 37, 38, 39, 40, 42, 43, 44, 46, 48, 51, 53, 54, 56, 59, 63, 
0, 1, 2, 3, 4, 7, 8, 11, 13, 14, 15, 17, 20, 21, 23, 24, 25, 29, 33, 38, 39, 40, 41, 43, 44, 45, 47, 49, 52, 54, 55, 57, 60, 
1, 2, 3, 4, 5, 8, 9, 12, 14, 15, 16, 18, 21, 22, 24, 25, 26, 30, 34, 39, 40, 41, 42, 44, 45, 46, 48, 50, 53, 55, 56, 58, 61, 
2, 3, 4, 5, 6, 9, 10, 13, 15, 16, 17, 19, 22, 23, 25, 26, 27, 31, 35, 40, 41, 42, 43, 45, 46, 47, 49, 51, 54, 56, 57, 59, 62, 
3, 4, 5, 6, 7, 10, 11, 14, 16, 17, 18, 20, 23, 24, 26, 27, 28, 32, 36, 41, 42, 43, 44, 46, 47, 48, 50, 52, 55, 57, 58, 60, 63, 
0, 4, 5, 6, 7, 8, 11, 12, 15, 17, 18, 19, 21, 24, 25, 27, 28, 29, 33, 37, 42, 43, 44, 45, 47, 48, 49, 51, 53, 56, 58, 59, 61, 
1, 5, 6, 7, 8, 9, 12, 13, 16, 18, 19, 20, 22, 25, 26, 28, 29, 30, 34, 38, 43, 44, 45, 46, 48, 49, 50, 52, 54, 57, 59, 60, 62, 
2, 6, 7, 8, 9, 10, 13, 14, 17, 19, 20, 21, 23, 26, 27, 29, 30, 31, 35, 39, 44, 45, 46, 47, 49, 50, 51, 53, 55, 58, 60, 61, 63, 
0, 3, 7, 8, 9, 10, 11, 14, 15, 18, 20, 21, 22, 24, 27, 28, 30, 31, 32, 36, 40, 45, 46, 47, 48, 50, 51, 52, 54, 56, 59, 61, 62, 
1, 4, 8, 9, 10, 11, 12, 15, 16, 19, 21, 22, 23, 25, 28, 29, 31, 32, 33, 37, 41, 46, 47, 48, 49, 51, 52, 53, 55, 57, 60, 62, 63, 
0, 2, 5, 9, 10, 11, 12, 13, 16, 17, 20, 22, 23, 24, 26, 29, 30, 32, 33, 34, 38, 42, 47, 48, 49, 50, 52, 53, 54, 56, 58, 61, 63, 
0, 1, 3, 6, 10, 11, 12, 13, 14, 17, 18, 21, 23, 24, 25, 27, 30, 31, 33, 34, 35, 39, 43, 48, 49, 50, 51, 53, 54, 55, 57, 59, 62, 
1, 2, 4, 7, 11, 12, 13, 14, 15, 18, 19, 22, 24, 25, 26, 28, 31, 32, 34, 35, 36, 40, 44, 49, 50, 51, 52, 54, 55, 56, 58, 60, 63, 
0, 2, 3, 5, 8, 12, 13, 14, 15, 16, 19, 20, 23, 25, 26, 27, 29, 32, 33, 35, 36, 37, 41, 45, 50, 51, 52, 53, 55, 56, 57, 59, 61, 
1, 3, 4, 6, 9, 13, 14, 15, 16, 17, 20, 21, 24, 26, 27, 28, 30, 33, 34, 36, 37, 38, 42, 46, 51, 52, 53, 54, 56, 57, 58, 60, 62, 
2, 4, 5, 7, 10, 14, 15, 16, 17, 18, 21, 22, 25, 27, 28, 29, 31, 34, 35, 37, 38, 39, 43, 47, 52, 53, 54, 55, 57, 58, 59, 61, 63, 
0, 3, 5, 6, 8, 11, 15, 16, 17, 18, 19, 22, 23, 26, 28, 29, 30, 32, 35, 36, 38, 39, 40, 44, 48, 53, 54, 55, 56, 58, 59, 60, 62, 
1, 4, 6, 7, 9, 12, 16, 17, 18, 19, 20, 23, 24, 27, 29, 30, 31, 33, 36, 37, 39, 40, 41, 45, 49, 54, 55, 56, 57, 59, 60, 61, 63, 
0, 2, 5, 7, 8, 10, 13, 17, 18, 19, 20, 21, 24, 25, 28, 30, 31, 32, 34, 37, 38, 40, 41, 42, 46, 50, 55, 56, 57, 58, 60, 61, 62, 
1, 3, 6, 8, 9, 11, 14, 18, 19, 20, 21, 22, 25, 26, 29, 31, 32, 33, 35, 38, 39, 41, 42, 43, 47, 51, 56, 57, 58, 59, 61, 62, 63, 
0, 2, 4, 7, 9, 10, 12, 15, 19, 20, 21, 22, 23, 26, 27, 30, 32, 33, 34, 36, 39, 40, 42, 43, 44, 48, 52, 57, 58, 59, 60, 62, 63, 
0, 1, 3, 5, 8, 10, 11, 13, 16, 20, 21, 22, 23, 24, 27, 28, 31, 33, 34, 35, 37, 40, 41, 43, 44, 45, 49, 53, 58, 59, 60, 61, 63, 
0, 1, 2, 4, 6, 9, 11, 12, 14, 17, 21, 22, 23, 24, 25, 28, 29, 32, 34, 35, 36, 38, 41, 42, 44, 45, 46, 50, 54, 59, 60, 61, 62, 
1, 2, 3, 5, 7, 10, 12, 13, 15, 18, 22, 23, 24, 25, 26, 29, 30, 33, 35, 36, 37, 39, 42, 43, 45, 46, 47, 51, 55, 60, 61, 62, 63, 
0, 2, 3, 4, 6, 8, 11, 13, 14, 16, 19, 23, 24, 25, 26, 27, 30, 31, 34, 36, 37, 38, 40, 43, 44, 46, 47, 48, 52, 56, 61, 62, 63, 
0, 1, 3, 4, 5, 7, 9, 12, 14, 15, 17, 20, 24, 25, 26, 27, 28, 31, 32, 35, 37, 38, 39, 41, 44, 45, 47, 48, 49, 53, 57, 62, 63, 
0, 1, 2, 4, 5, 6, 8, 10, 13, 15, 16, 18, 21, 25, 26, 27, 28, 29, 32, 33, 36, 38, 39, 40, 42, 45, 46, 48, 49, 50, 54, 58, 63, 
0, 1, 2, 3, 5, 6, 7, 9, 11, 14, 16, 17, 19, 22, 26, 27, 28, 29, 30, 33, 34, 37, 39, 40, 41, 43, 46, 47, 49, 50, 51, 55, 59, 
1, 2, 3, 4, 6, 7, 8, 10, 12, 15, 17, 18, 20, 23, 27, 28, 29, 30, 31, 34, 35, 38, 40, 41, 42, 44, 47, 48, 50, 51, 52, 56, 60, 
2, 3, 4, 5, 7, 8, 9, 11, 13, 16, 18, 19, 21, 24, 28, 29, 30, 31, 32, 35, 36, 39, 41, 42, 43, 45, 48, 49, 51, 52, 53, 57, 61, 
3, 4, 5, 6, 8, 9, 10, 12, 14, 17, 19, 20, 22, 25, 29, 30, 31, 32, 33, 36, 37, 40, 42, 43, 44, 46, 49, 50, 52, 53, 54, 58, 62, 
4, 5, 6, 7, 9, 10, 11, 13, 15, 18, 20, 21, 23, 26, 30, 31, 32, 33, 34, 37, 38, 41, 43, 44, 45, 47, 50, 51, 53, 54, 55, 59, 63, 
0, 5, 6, 7, 8, 10, 11, 12, 14, 16, 19, 21, 22, 24, 27, 31, 32, 33, 34, 35, 38, 39, 42, 44, 45, 46, 48, 51, 52, 54, 55, 56, 60, 
1, 6, 7, 8, 9, 11, 12, 13, 15, 17, 20, 22, 23, 25, 28, 32, 33, 34, 35, 36, 39, 40, 43, 45, 46, 47, 49, 52, 53, 55, 56, 57, 61, 
2, 7, 8, 9, 10, 12, 13, 14, 16, 18, 21, 23, 24, 26, 29, 33, 34, 35, 36, 37, 40, 41, 44, 46, 47, 48, 50, 53, 54, 56, 57, 58, 62, 
3, 8, 9, 10, 11, 13, 14, 15, 17, 19, 22, 24, 25, 27, 30, 34, 35, 36, 37, 38, 41, 42, 45, 47, 48, 49, 51, 54, 55, 57, 58, 59, 63, 
0, 4, 9, 10, 11, 12, 14, 15, 16, 18, 20, 23, 25, 26, 28, 31, 35, 36, 37, 38, 39, 42, 43, 46, 48, 49, 50, 52, 55, 56, 58, 59, 60, 
1, 5, 10, 11, 12, 13, 15, 16, 17, 19, 21, 24, 26, 27, 29, 32, 36, 37, 38, 39, 40, 43, 44, 47, 49, 50, 51, 53, 56, 57, 59, 60, 61, 
2, 6, 11, 12, 13, 14, 16, 17, 18, 20, 22, 25, 27, 28, 30, 33, 37, 38, 39, 40, 41, 44, 45, 48, 50, 51, 52, 54, 57, 58, 60, 61, 62, 
3, 7, 12, 13, 14, 15, 17, 18, 19, 21, 23, 26, 28, 29, 31, 34, 38, 39, 40, 41, 42, 45, 46, 49, 51, 52, 53, 55, 58, 59, 61, 62, 63, 
0, 4, 8, 13, 14, 15, 16, 18, 19, 20, 22, 24, 27, 29, 30, 32, 35, 39, 40, 41, 42, 43, 46, 47, 50, 52, 53, 54, 56, 59, 60, 62, 63, 
0, 1, 5, 9, 14, 15, 16, 17, 19, 20, 21, 23, 25, 28, 30, 31, 33, 36, 40, 41, 42, 43, 44, 47, 48, 51, 53, 54, 55, 57, 60, 61, 63, 
0, 1, 2, 6, 10, 15, 16, 17, 18, 20, 21, 22, 24, 26, 29, 31, 32, 34, 37, 41, 42, 43, 44, 45, 48, 49, 52, 54, 55, 56, 58, 61, 62, 
1, 2, 3, 7, 11, 16, 17, 18, 19, 21, 22, 23, 25, 27, 30, 32, 33, 35, 38, 42, 43, 44, 45, 46, 49, 50, 53, 55, 56, 57, 59, 62, 63, 
0, 2, 3, 4, 8, 12, 17, 18, 19, 20, 22, 23, 24, 26, 28, 31, 33, 34, 36, 39, 43, 44, 45, 46, 47, 50, 51, 54, 56, 57, 58, 60, 63, 
0, 1, 3, 4, 5, 9, 13, 18, 19, 20, 21, 23, 24, 25, 27, 29, 32, 34, 35, 37, 40, 44, 45, 46, 47, 48, 51, 52, 55, 57, 58, 59, 61, 
1, 2, 4, 5, 6, 10, 14, 19, 20, 21, 22, 24, 25, 26, 28, 30, 33, 35, 36, 38, 41, 45, 46, 47, 48, 49, 52, 53, 56, 58, 59, 60, 62, 
2, 3, 5, 6, 7, 11, 15, 20, 21, 22, 23, 25, 26, 27, 29, 31, 34, 36, 37, 39, 42, 46, 47, 48, 49, 50, 53, 54, 57, 59, 60, 61, 63, 
0, 3, 4, 6, 7, 8, 12, 16, 21, 22, 23, 24, 26, 27, 28, 30, 32, 35, 37, 38, 40, 43, 47, 48, 49, 50, 51, 54, 55, 58, 60, 61, 62, 
1, 4, 5, 7, 8, 9, 13, 17, 22, 23, 24, 25, 27, 28, 29, 31, 33, 36, 38, 39, 41, 44, 48, 49, 50, 51, 52, 55, 56, 59, 61, 62, 63, 
0, 2, 5, 6, 8, 9, 10, 14, 18, 23, 24, 25, 26, 28, 29, 30, 32, 34, 37, 39, 40, 42, 45, 49, 50, 51, 52, 53, 56, 57, 60, 62, 63, 
0, 1, 3, 6, 7, 9, 10, 11, 15, 19, 24, 25, 26, 27, 29, 30, 31, 33, 35, 38, 40, 41, 43, 46, 50, 51, 52, 53, 54, 57, 58, 61, 63, 
0, 1, 2, 4, 7, 8, 10, 11, 12, 16, 20, 25, 26, 27, 28, 30, 31, 32, 34, 36, 39, 41, 42, 44, 47, 51, 52, 53, 54, 55, 58, 59, 62, 
1, 2, 3, 5, 8, 9, 11, 12, 13, 17, 21, 26, 27, 28, 29, 31, 32, 33, 35, 37, 40, 42, 43, 45, 48, 52, 53, 54, 55, 56, 59, 60, 63, 
0, 2, 3, 4, 6, 9, 10, 12, 13, 14, 18, 22, 27, 28, 29, 30, 32, 33, 34, 36, 38, 41, 43, 44, 46, 49, 53, 54, 55, 56, 57, 60, 61, 
1, 3, 4, 5, 7, 10, 11, 13, 14, 15, 19, 23, 28, 29, 30, 31, 33, 34, 35, 37, 39, 42, 44, 45, 47, 50, 54, 55, 56, 57, 58, 61, 62, 
2, 4, 5, 6, 8, 11, 12, 14, 15, 16, 20, 24, 29, 30, 31, 32, 34, 35, 36, 38, 40, 43, 45, 46, 48, 51, 55, 56, 57, 58, 59, 62, 63, 
0, 3, 5, 6, 7, 9, 12, 13, 15, 16, 17, 21, 25, 30, 31, 32, 33, 35, 36, 37, 39, 41, 44, 46, 47, 49, 52, 56, 57, 58, 59, 60, 63, 
0, 1, 4, 6, 7, 8, 10, 13, 14, 16, 17, 18, 22, 26, 31, 32, 33, 34, 36, 37, 38, 40, 42, 45, 47, 48, 50, 53, 57, 58, 59, 60, 61, 
1, 2, 5, 7, 8, 9, 11, 14, 15, 17, 18, 19, 23, 27, 32, 33, 34, 35, 37, 38, 39, 41, 43, 46, 48, 49, 51, 54, 58, 59, 60, 61, 62, 
2, 3, 6, 8, 9, 10, 12, 15, 16, 18, 19, 20, 24, 28, 33, 34, 35, 36, 38, 39, 40, 42, 44, 47, 49, 50, 52, 55, 59, 60, 61, 62, 63
]
);
array[0..63, 0..32] of int: inv_lin_state_row_2 = array2d(0..63, 0..32,
[
0, 1, 2, 3, 4, 5, 6, 12, 17, 18, 22, 24, 27, 28, 29, 30, 32, 36, 37, 38, 41, 44, 46, 47, 49, 50, 51, 53, 54, 57, 58, 60, 62, 
1, 2, 3, 4, 5, 6, 7, 13, 18, 19, 23, 25, 28, 29, 30, 31, 33, 37, 38, 39, 42, 45, 47, 48, 50, 51, 52, 54, 55, 58, 59, 61, 63, 
0, 2, 3, 4, 5, 6, 7, 8, 14, 19, 20, 24, 26, 29, 30, 31, 32, 34, 38, 39, 40, 43, 46, 48, 49, 51, 52, 53, 55, 56, 59, 60, 62, 
1, 3, 4, 5, 6, 7, 8, 9, 15, 20, 21, 25, 27, 30, 31, 32, 33, 35, 39, 40, 41, 44, 47, 49, 50, 52, 53, 54, 56, 57, 60, 61, 63, 
0, 2, 4, 5, 6, 7, 8, 9, 10, 16, 21, 22, 26, 28, 31, 32, 33, 34, 36, 40, 41, 42, 45, 48, 50, 51, 53, 54, 55, 57, 58, 61, 62, 
1, 3, 5, 6, 7, 8, 9, 10, 11, 17, 22, 23, 27, 29, 32, 33, 34, 35, 37, 41, 42, 43, 46, 49, 51, 52, 54, 55, 56, 58, 59, 62, 63, 
0, 2, 4, 6, 7, 8, 9, 10, 11, 12, 18, 23, 24, 28, 30, 33, 34, 35, 36, 38, 42, 43, 44, 47, 50, 52, 53, 55, 56, 57, 59, 60, 63, 
0, 1, 3, 5, 7, 8, 9, 10, 11, 12, 13, 19, 24, 25, 29, 31, 34, 35, 36, 37, 39, 43, 44, 45, 48, 51, 53, 54, 56, 57, 58, 60, 61, 
1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 20, 25, 26, 30, 32, 35, 36, 37, 38, 40, 44, 45, 46, 49, 52, 54, 55, 57, 58, 59, 61, 62, 
2, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 21, 26, 27, 31, 33, 36, 37, 38, 39, 41, 45, 46, 47, 50, 53, 55, 56, 58, 59, 60, 62, 63, 
0, 3, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 22, 27, 28, 32, 34, 37, 38, 39, 40, 42, 46, 47, 48, 51, 54, 56, 57, 59, 60, 61, 63, 
0, 1, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 23, 28, 29, 33, 35, 38, 39, 40, 41, 43, 47, 48, 49, 52, 55, 57, 58, 60, 61, 62, 
1, 2, 5, 6, 8, 10, 12, 13, 14, 15, 16, 17, 18, 24, 29, 30, 34, 36, 39, 40, 41, 42, 44, 48, 49, 50, 53, 56, 58, 59, 61, 62, 63, 
0, 2, 3, 6, 7, 9, 11, 13, 14, 15, 16, 17, 18, 19, 25, 30, 31, 35, 37, 40, 41, 42, 43, 45, 49, 50, 51, 54, 57, 59, 60, 62, 63, 
0, 1, 3, 4, 7, 8, 10, 12, 14, 15, 16, 17, 18, 19, 20, 26, 31, 32, 36, 38, 41, 42, 43, 44, 46, 50, 51, 52, 55, 58, 60, 61, 63, 
0, 1, 2, 4, 5, 8, 9, 11, 13, 15, 16, 17, 18, 19, 20, 21, 27, 32, 33, 37, 39, 42, 43, 44, 45, 47, 51, 52, 53, 56, 59, 61, 62, 
1, 2, 3, 5, 6, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 28, 33, 34, 38, 40, 43, 44, 45, 46, 48, 52, 53, 54, 57, 60, 62, 63, 
0, 2, 3, 4, 6, 7, 10, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 29, 34, 35, 39, 41, 44, 45, 46, 47, 49, 53, 54, 55, 58, 61, 63, 
0, 1, 3, 4, 5, 7, 8, 11, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 30, 35, 36, 40, 42, 45, 46, 47, 48, 50, 54, 55, 56, 59, 62, 
1, 2, 4, 5, 6, 8, 9, 12, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 31, 36, 37, 41, 43, 46, 47, 48, 49, 51, 55, 56, 57, 60, 63, 
0, 2, 3, 5, 6, 7, 9, 10, 13, 14, 16, 18, 20, 21, 22, 23, 24, 25, 26, 32, 37, 38, 42, 44, 47, 48, 49, 50, 52, 56, 57, 58, 61, 
1, 3, 4, 6, 7, 8, 10, 11, 14, 15, 17, 19, 21, 22, 23, 24, 25, 26, 27, 33, 38, 39, 43, 45, 48, 49, 50, 51, 53, 57, 58, 59, 62, 
2, 4, 5, 7, 8, 9, 11, 12, 15, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 34, 39, 40, 44, 46, 49, 50, 51, 52, 54, 58, 59, 60, 63, 
0, 3, 5, 6, 8, 9, 10, 12, 13, 16, 17, 19, 21, 23, 24, 25, 26, 27, 28, 29, 35, 40, 41, 45, 47, 50, 51, 52, 53, 55, 59, 60, 61, 
1, 4, 6, 7, 9, 10, 11, 13, 14, 17, 18, 20, 22, 24, 25, 26, 27, 28, 29, 30, 36, 41, 42, 46, 48, 51, 52, 53, 54, 56, 60, 61, 62, 
2, 5, 7, 8, 10, 11, 12, 14, 15, 18, 19, 21, 23, 25, 26, 27, 28, 29, 30, 31, 37, 42, 43, 47, 49, 52, 53, 54, 55, 57, 61, 62, 63, 
0, 3, 6, 8, 9, 11, 12, 13, 15, 16, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 32, 38, 43, 44, 48, 50, 53, 54, 55, 56, 58, 62, 63, 
0, 1, 4, 7, 9, 10, 12, 13, 14, 16, 17, 20, 21, 23, 25, 27, 28, 29, 30, 31, 32, 33, 39, 44, 45, 49, 51, 54, 55, 56, 57, 59, 63, 
0, 1, 2, 5, 8, 10, 11, 13, 14, 15, 17, 18, 21, 22, 24, 26, 28, 29, 30, 31, 32, 33, 34, 40, 45, 46, 50, 52, 55, 56, 57, 58, 60, 
1, 2, 3, 6, 9, 11, 12, 14, 15, 16, 18, 19, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 35, 41, 46, 47, 51, 53, 56, 57, 58, 59, 61, 
2, 3, 4, 7, 10, 12, 13, 15, 16, 17, 19, 20, 23, 24, 26, 28, 30, 31, 32, 33, 34, 35, 36, 42, 47, 48, 52, 54, 57, 58, 59, 60, 62, 
3, 4, 5, 8, 11, 13, 14, 16, 17, 18, 20, 21, 24, 25, 27, 29, 31, 32, 33, 34, 35, 36, 37, 43, 48, 49, 53, 55, 58, 59, 60, 61, 63, 
0, 4, 5, 6, 9, 12, 14, 15, 17, 18, 19, 21, 22, 25, 26, 28, 30, 32, 33, 34, 35, 36, 37, 38, 44, 49, 50, 54, 56, 59, 60, 61, 62, 
1, 5, 6, 7, 10, 13, 15, 16, 18, 19, 20, 22, 23, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 45, 50, 51, 55, 57, 60, 61, 62, 63, 
0, 2, 6, 7, 8, 11, 14, 16, 17, 19, 20, 21, 23, 24, 27, 28, 30, 32, 34, 35, 36, 37, 38, 39, 40, 46, 51, 52, 56, 58, 61, 62, 63, 
0, 1, 3, 7, 8, 9, 12, 15, 17, 18, 20, 21, 22, 24, 25, 28, 29, 31, 33, 35, 36, 37, 38, 39, 40, 41, 47, 52, 53, 57, 59, 62, 63, 
0, 1, 2, 4, 8, 9, 10, 13, 16, 18, 19, 21, 22, 23, 25, 26, 29, 30, 32, 34, 36, 37, 38, 39, 40, 41, 42, 48, 53, 54, 58, 60, 63, 
0, 1, 2, 3, 5, 9, 10, 11, 14, 17, 19, 20, 22, 23, 24, 26, 27, 30, 31, 33, 35, 37, 38, 39, 40, 41, 42, 43, 49, 54, 55, 59, 61, 
1, 2, 3, 4, 6, 10, 11, 12, 15, 18, 20, 21, 23, 24, 25, 27, 28, 31, 32, 34, 36, 38, 39, 40, 41, 42, 43, 44, 50, 55, 56, 60, 62, 
2, 3, 4, 5, 7, 11, 12, 13, 16, 19, 21, 22, 24, 25, 26, 28, 29, 32, 33, 35, 37, 39, 40, 41, 42, 43, 44, 45, 51, 56, 57, 61, 63, 
0, 3, 4, 5, 6, 8, 12, 13, 14, 17, 20, 22, 23, 25, 26, 27, 29, 30, 33, 34, 36, 38, 40, 41, 42, 43, 44, 45, 46, 52, 57, 58, 62, 
1, 4, 5, 6, 7, 9, 13, 14, 15, 18, 21, 23, 24, 26, 27, 28, 30, 31, 34, 35, 37, 39, 41, 42, 43, 44, 45, 46, 47, 53, 58, 59, 63, 
0, 2, 5, 6, 7, 8, 10, 14, 15, 16, 19, 22, 24, 25, 27, 28, 29, 31, 32, 35, 36, 38, 40, 42, 43, 44, 45, 46, 47, 48, 54, 59, 60, 
1, 3, 6, 7, 8, 9, 11, 15, 16, 17, 20, 23, 25, 26, 28, 29, 30, 32, 33, 36, 37, 39, 41, 43, 44, 45, 46, 47, 48, 49, 55, 60, 61, 
2, 4, 7, 8, 9, 10, 12, 16, 17, 18, 21, 24, 26, 27, 29, 30, 31, 33, 34, 37, 38, 40, 42, 44, 45, 46, 47, 48, 49, 50, 56, 61, 62, 
3, 5, 8, 9, 10, 11, 13, 17, 18, 19, 22, 25, 27, 28, 30, 31, 32, 34, 35, 38, 39, 41, 43, 45, 46, 47, 48, 49, 50, 51, 57, 62, 63, 
0, 4, 6, 9, 10, 11, 12, 14, 18, 19, 20, 23, 26, 28, 29, 31, 32, 33, 35, 36, 39, 40, 42, 44, 46, 47, 48, 49, 50, 51, 52, 58, 63, 
0, 1, 5, 7, 10, 11, 12, 13, 15, 19, 20, 21, 24, 27, 29, 30, 32, 33, 34, 36, 37, 40, 41, 43, 45, 47, 48, 49, 50, 51, 52, 53, 59, 
1, 2, 6, 8, 11, 12, 13, 14, 16, 20, 21, 22, 25, 28, 30, 31, 33, 34, 35, 37, 38, 41, 42, 44, 46, 48, 49, 50, 51, 52, 53, 54, 60, 
2, 3, 7, 9, 12, 13, 14, 15, 17, 21, 22, 23, 26, 29, 31, 32, 34, 35, 36, 38, 39, 42, 43, 45, 47, 49, 50, 51, 52, 53, 54, 55, 61, 
3, 4, 8, 10, 13, 14, 15, 16, 18, 22, 23, 24, 27, 30, 32, 33, 35, 36, 37, 39, 40, 43, 44, 46, 48, 50, 51, 52, 53, 54, 55, 56, 62, 
4, 5, 9, 11, 14, 15, 16, 17, 19, 23, 24, 25, 28, 31, 33, 34, 36, 37, 38, 40, 41, 44, 45, 47, 49, 51, 52, 53, 54, 55, 56, 57, 63, 
0, 5, 6, 10, 12, 15, 16, 17, 18, 20, 24, 25, 26, 29, 32, 34, 35, 37, 38, 39, 41, 42, 45, 46, 48, 50, 52, 53, 54, 55, 56, 57, 58, 
1, 6, 7, 11, 13, 16, 17, 18, 19, 21, 25, 26, 27, 30, 33, 35, 36, 38, 39, 40, 42, 43, 46, 47, 49, 51, 53, 54, 55, 56, 57, 58, 59, 
2, 7, 8, 12, 14, 17, 18, 19, 20, 22, 26, 27, 28, 31, 34, 36, 37, 39, 40, 41, 43, 44, 47, 48, 50, 52, 54, 55, 56, 57, 58, 59, 60, 
3, 8, 9, 13, 15, 18, 19, 20, 21, 23, 27, 28, 29, 32, 35, 37, 38, 40, 41, 42, 44, 45, 48, 49, 51, 53, 55, 56, 57, 58, 59, 60, 61, 
4, 9, 10, 14, 16, 19, 20, 21, 22, 24, 28, 29, 30, 33, 36, 38, 39, 41, 42, 43, 45, 46, 49, 50, 52, 54, 56, 57, 58, 59, 60, 61, 62, 
5, 10, 11, 15, 17, 20, 21, 22, 23, 25, 29, 30, 31, 34, 37, 39, 40, 42, 43, 44, 46, 47, 50, 51, 53, 55, 57, 58, 59, 60, 61, 62, 63, 
0, 6, 11, 12, 16, 18, 21, 22, 23, 24, 26, 30, 31, 32, 35, 38, 40, 41, 43, 44, 45, 47, 48, 51, 52, 54, 56, 58, 59, 60, 61, 62, 63, 
0, 1, 7, 12, 13, 17, 19, 22, 23, 24, 25, 27, 31, 32, 33, 36, 39, 41, 42, 44, 45, 46, 48, 49, 52, 53, 55, 57, 59, 60, 61, 62, 63, 
0, 1, 2, 8, 13, 14, 18, 20, 23, 24, 25, 26, 28, 32, 33, 34, 37, 40, 42, 43, 45, 46, 47, 49, 50, 53, 54, 56, 58, 60, 61, 62, 63, 
0, 1, 2, 3, 9, 14, 15, 19, 21, 24, 25, 26, 27, 29, 33, 34, 35, 38, 41, 43, 44, 46, 47, 48, 50, 51, 54, 55, 57, 59, 61, 62, 63, 
0, 1, 2, 3, 4, 10, 15, 16, 20, 22, 25, 26, 27, 28, 30, 34, 35, 36, 39, 42, 44, 45, 47, 48, 49, 51, 52, 55, 56, 58, 60, 62, 63, 
0, 1, 2, 3, 4, 5, 11, 16, 17, 21, 23, 26, 27, 28, 29, 31, 35, 36, 37, 40, 43, 45, 46, 48, 49, 50, 52, 53, 56, 57, 59, 61, 63
]
);
array[0..63, 0..32] of int: inv_lin_state_row_3 = array2d(0..63, 0..32,
[
1, 3, 6, 11, 15, 16, 17, 20, 22, 24, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 46, 47, 52, 55, 57, 58, 60, 62, 63, 
0, 2, 4, 7, 12, 16, 17, 18, 21, 23, 25, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 47, 48, 53, 56, 58, 59, 61, 63, 
0, 1, 3, 5, 8, 13, 17, 18, 19, 22, 24, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 48, 49, 54, 57, 59, 60, 62, 
1, 2, 4, 6, 9, 14, 18, 19, 20, 23, 25, 27, 30, 31, 32, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 49, 50, 55, 58, 60, 61, 63, 
0, 2, 3, 5, 7, 10, 15, 19, 20, 21, 24, 26, 28, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 50, 51, 56, 59, 61, 62, 
1, 3, 4, 6, 8, 11, 16, 20, 21, 22, 25, 27, 29, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 51, 52, 57, 60, 62, 63, 
0, 2, 4, 5, 7, 9, 12, 17, 21, 22, 23, 26, 28, 30, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 58, 61, 63, 
0, 1, 3, 5, 6, 8, 10, 13, 18, 22, 23, 24, 27, 29, 31, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 53, 54, 59, 62, 
1, 2, 4, 6, 7, 9, 11, 14, 19, 23, 24, 25, 28, 30, 32, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 54, 55, 60, 63, 
0, 2, 3, 5, 7, 8, 10, 12, 15, 20, 24, 25, 26, 29, 31, 33, 36, 37, 38, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 52, 55, 56, 61, 
1, 3, 4, 6, 8, 9, 11, 13, 16, 21, 25, 26, 27, 30, 32, 34, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 56, 57, 62, 
2, 4, 5, 7, 9, 10, 12, 14, 17, 22, 26, 27, 28, 31, 33, 35, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 51, 52, 53, 54, 57, 58, 63, 
0, 3, 5, 6, 8, 10, 11, 13, 15, 18, 23, 27, 28, 29, 32, 34, 36, 39, 40, 41, 43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 55, 58, 59, 
1, 4, 6, 7, 9, 11, 12, 14, 16, 19, 24, 28, 29, 30, 33, 35, 37, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 59, 60, 
2, 5, 7, 8, 10, 12, 13, 15, 17, 20, 25, 29, 30, 31, 34, 36, 38, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 60, 61, 
3, 6, 8, 9, 11, 13, 14, 16, 18, 21, 26, 30, 31, 32, 35, 37, 39, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 61, 62, 
4, 7, 9, 10, 12, 14, 15, 17, 19, 22, 27, 31, 32, 33, 36, 38, 40, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 62, 63, 
0, 5, 8, 10, 11, 13, 15, 16, 18, 20, 23, 28, 32, 33, 34, 37, 39, 41, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 63, 
0, 1, 6, 9, 11, 12, 14, 16, 17, 19, 21, 24, 29, 33, 34, 35, 38, 40, 42, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 
1, 2, 7, 10, 12, 13, 15, 17, 18, 20, 22, 25, 30, 34, 35, 36, 39, 41, 43, 46, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 
2, 3, 8, 11, 13, 14, 16, 18, 19, 21, 23, 26, 31, 35, 36, 37, 40, 42, 44, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 
0, 3, 4, 9, 12, 14, 15, 17, 19, 20, 22, 24, 27, 32, 36, 37, 38, 41, 43, 45, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 
0, 1, 4, 5, 10, 13, 15, 16, 18, 20, 21, 23, 25, 28, 33, 37, 38, 39, 42, 44, 46, 49, 50, 51, 53, 54, 55, 57, 58, 59, 60, 62, 63, 
0, 1, 2, 5, 6, 11, 14, 16, 17, 19, 21, 22, 24, 26, 29, 34, 38, 39, 40, 43, 45, 47, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 63, 
0, 1, 2, 3, 6, 7, 12, 15, 17, 18, 20, 22, 23, 25, 27, 30, 35, 39, 40, 41, 44, 46, 48, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 
1, 2, 3, 4, 7, 8, 13, 16, 18, 19, 21, 23, 24, 26, 28, 31, 36, 40, 41, 42, 45, 47, 49, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 
0, 2, 3, 4, 5, 8, 9, 14, 17, 19, 20, 22, 24, 25, 27, 29, 32, 37, 41, 42, 43, 46, 48, 50, 53, 54, 55, 57, 58, 59, 61, 62, 63, 
0, 1, 3, 4, 5, 6, 9, 10, 15, 18, 20, 21, 23, 25, 26, 28, 30, 33, 38, 42, 43, 44, 47, 49, 51, 54, 55, 56, 58, 59, 60, 62, 63, 
0, 1, 2, 4, 5, 6, 7, 10, 11, 16, 19, 21, 22, 24, 26, 27, 29, 31, 34, 39, 43, 44, 45, 48, 50, 52, 55, 56, 57, 59, 60, 61, 63, 
0, 1, 2, 3, 5, 6, 7, 8, 11, 12, 17, 20, 22, 23, 25, 27, 28, 30, 32, 35, 40, 44, 45, 46, 49, 51, 53, 56, 57, 58, 60, 61, 62, 
1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 18, 21, 23, 24, 26, 28, 29, 31, 33, 36, 41, 45, 46, 47, 50, 52, 54, 57, 58, 59, 61, 62, 63, 
0, 2, 3, 4, 5, 7, 8, 9, 10, 13, 14, 19, 22, 24, 25, 27, 29, 30, 32, 34, 37, 42, 46, 47, 48, 51, 53, 55, 58, 59, 60, 62, 63, 
0, 1, 3, 4, 5, 6, 8, 9, 10, 11, 14, 15, 20, 23, 25, 26, 28, 30, 31, 33, 35, 38, 43, 47, 48, 49, 52, 54, 56, 59, 60, 61, 63, 
0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 15, 16, 21, 24, 26, 27, 29, 31, 32, 34, 36, 39, 44, 48, 49, 50, 53, 55, 57, 60, 61, 62, 
1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 22, 25, 27, 28, 30, 32, 33, 35, 37, 40, 45, 49, 50, 51, 54, 56, 58, 61, 62, 63, 
0, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 17, 18, 23, 26, 28, 29, 31, 33, 34, 36, 38, 41, 46, 50, 51, 52, 55, 57, 59, 62, 63, 
0, 1, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 18, 19, 24, 27, 29, 30, 32, 34, 35, 37, 39, 42, 47, 51, 52, 53, 56, 58, 60, 63, 
0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 19, 20, 25, 28, 30, 31, 33, 35, 36, 38, 40, 43, 48, 52, 53, 54, 57, 59, 61, 
1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 20, 21, 26, 29, 31, 32, 34, 36, 37, 39, 41, 44, 49, 53, 54, 55, 58, 60, 62, 
2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 27, 30, 32, 33, 35, 37, 38, 40, 42, 45, 50, 54, 55, 56, 59, 61, 63, 
0, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 22, 23, 28, 31, 33, 34, 36, 38, 39, 41, 43, 46, 51, 55, 56, 57, 60, 62, 
1, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 23, 24, 29, 32, 34, 35, 37, 39, 40, 42, 44, 47, 52, 56, 57, 58, 61, 63, 
0, 2, 5, 6, 7, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 24, 25, 30, 33, 35, 36, 38, 40, 41, 43, 45, 48, 53, 57, 58, 59, 62, 
1, 3, 6, 7, 8, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 31, 34, 36, 37, 39, 41, 42, 44, 46, 49, 54, 58, 59, 60, 63, 
0, 2, 4, 7, 8, 9, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 32, 35, 37, 38, 40, 42, 43, 45, 47, 50, 55, 59, 60, 61, 
1, 3, 5, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 27, 28, 33, 36, 38, 39, 41, 43, 44, 46, 48, 51, 56, 60, 61, 62, 
2, 4, 6, 9, 10, 11, 13, 14, 15, 17, 18, 19, 20, 22, 23, 24, 25, 28, 29, 34, 37, 39, 40, 42, 44, 45, 47, 49, 52, 57, 61, 62, 63, 
0, 3, 5, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 23, 24, 25, 26, 29, 30, 35, 38, 40, 41, 43, 45, 46, 48, 50, 53, 58, 62, 63, 
0, 1, 4, 6, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 30, 31, 36, 39, 41, 42, 44, 46, 47, 49, 51, 54, 59, 63, 
0, 1, 2, 5, 7, 9, 12, 13, 14, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 31, 32, 37, 40, 42, 43, 45, 47, 48, 50, 52, 55, 60, 
1, 2, 3, 6, 8, 10, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 32, 33, 38, 41, 43, 44, 46, 48, 49, 51, 53, 56, 61, 
2, 3, 4, 7, 9, 11, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 33, 34, 39, 42, 44, 45, 47, 49, 50, 52, 54, 57, 62, 
3, 4, 5, 8, 10, 12, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 34, 35, 40, 43, 45, 46, 48, 50, 51, 53, 55, 58, 63, 
0, 4, 5, 6, 9, 11, 13, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 35, 36, 41, 44, 46, 47, 49, 51, 52, 54, 56, 59, 
1, 5, 6, 7, 10, 12, 14, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 36, 37, 42, 45, 47, 48, 50, 52, 53, 55, 57, 60, 
2, 6, 7, 8, 11, 13, 15, 18, 19, 20, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 37, 38, 43, 46, 48, 49, 51, 53, 54, 56, 58, 61, 
3, 7, 8, 9, 12, 14, 16, 19, 20, 21, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 44, 47, 49, 50, 52, 54, 55, 57, 59, 62, 
4, 8, 9, 10, 13, 15, 17, 20, 21, 22, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 39, 40, 45, 48, 50, 51, 53, 55, 56, 58, 60, 63, 
0, 5, 9, 10, 11, 14, 16, 18, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 40, 41, 46, 49, 51, 52, 54, 56, 57, 59, 61, 
1, 6, 10, 11, 12, 15, 17, 19, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 41, 42, 47, 50, 52, 53, 55, 57, 58, 60, 62, 
2, 7, 11, 12, 13, 16, 18, 20, 23, 24, 25, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 42, 43, 48, 51, 53, 54, 56, 58, 59, 61, 63, 
0, 3, 8, 12, 13, 14, 17, 19, 21, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 40, 43, 44, 49, 52, 54, 55, 57, 59, 60, 62, 
1, 4, 9, 13, 14, 15, 18, 20, 22, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 44, 45, 50, 53, 55, 56, 58, 60, 61, 63, 
0, 2, 5, 10, 14, 15, 16, 19, 21, 23, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 45, 46, 51, 54, 56, 57, 59, 61, 62
]
);
array[0..63, 0..34] of int: inv_lin_state_row_4 = array2d(0..63, 0..34,
[
0, 1, 3, 4, 9, 11, 14, 16, 17, 18, 19, 20, 23, 24, 28, 29, 33, 34, 35, 36, 39, 40, 42, 43, 44, 48, 51, 53, 54, 55, 59, 60, 61, 62, 63, 
0, 1, 2, 4, 5, 10, 12, 15, 17, 18, 19, 20, 21, 24, 25, 29, 30, 34, 35, 36, 37, 40, 41, 43, 44, 45, 49, 52, 54, 55, 56, 60, 61, 62, 63, 
0, 1, 2, 3, 5, 6, 11, 13, 16, 18, 19, 20, 21, 22, 25, 26, 30, 31, 35, 36, 37, 38, 41, 42, 44, 45, 46, 50, 53, 55, 56, 57, 61, 62, 63, 
0, 1, 2, 3, 4, 6, 7, 12, 14, 17, 19, 20, 21, 22, 23, 26, 27, 31, 32, 36, 37, 38, 39, 42, 43, 45, 46, 47, 51, 54, 56, 57, 58, 62, 63, 
0, 1, 2, 3, 4, 5, 7, 8, 13, 15, 18, 20, 21, 22, 23, 24, 27, 28, 32, 33, 37, 38, 39, 40, 43, 44, 46, 47, 48, 52, 55, 57, 58, 59, 63, 
0, 1, 2, 3, 4, 5, 6, 8, 9, 14, 16, 19, 21, 22, 23, 24, 25, 28, 29, 33, 34, 38, 39, 40, 41, 44, 45, 47, 48, 49, 53, 56, 58, 59, 60, 
1, 2, 3, 4, 5, 6, 7, 9, 10, 15, 17, 20, 22, 23, 24, 25, 26, 29, 30, 34, 35, 39, 40, 41, 42, 45, 46, 48, 49, 50, 54, 57, 59, 60, 61, 
2, 3, 4, 5, 6, 7, 8, 10, 11, 16, 18, 21, 23, 24, 25, 26, 27, 30, 31, 35, 36, 40, 41, 42, 43, 46, 47, 49, 50, 51, 55, 58, 60, 61, 62, 
3, 4, 5, 6, 7, 8, 9, 11, 12, 17, 19, 22, 24, 25, 26, 27, 28, 31, 32, 36, 37, 41, 42, 43, 44, 47, 48, 50, 51, 52, 56, 59, 61, 62, 63, 
0, 4, 5, 6, 7, 8, 9, 10, 12, 13, 18, 20, 23, 25, 26, 27, 28, 29, 32, 33, 37, 38, 42, 43, 44, 45, 48, 49, 51, 52, 53, 57, 60, 62, 63, 
0, 1, 5, 6, 7, 8, 9, 10, 11, 13, 14, 19, 21, 24, 26, 27, 28, 29, 30, 33, 34, 38, 39, 43, 44, 45, 46, 49, 50, 52, 53, 54, 58, 61, 63, 
0, 1, 2, 6, 7, 8, 9, 10, 11, 12, 14, 15, 20, 22, 25, 27, 28, 29, 30, 31, 34, 35, 39, 40, 44, 45, 46, 47, 50, 51, 53, 54, 55, 59, 62, 
1, 2, 3, 7, 8, 9, 10, 11, 12, 13, 15, 16, 21, 23, 26, 28, 29, 30, 31, 32, 35, 36, 40, 41, 45, 46, 47, 48, 51, 52, 54, 55, 56, 60, 63, 
0, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 16, 17, 22, 24, 27, 29, 30, 31, 32, 33, 36, 37, 41, 42, 46, 47, 48, 49, 52, 53, 55, 56, 57, 61, 
1, 3, 4, 5, 9, 10, 11, 12, 13, 14, 15, 17, 18, 23, 25, 28, 30, 31, 32, 33, 34, 37, 38, 42, 43, 47, 48, 49, 50, 53, 54, 56, 57, 58, 62, 
2, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 18, 19, 24, 26, 29, 31, 32, 33, 34, 35, 38, 39, 43, 44, 48, 49, 50, 51, 54, 55, 57, 58, 59, 63, 
0, 3, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 19, 20, 25, 27, 30, 32, 33, 34, 35, 36, 39, 40, 44, 45, 49, 50, 51, 52, 55, 56, 58, 59, 60, 
1, 4, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 20, 21, 26, 28, 31, 33, 34, 35, 36, 37, 40, 41, 45, 46, 50, 51, 52, 53, 56, 57, 59, 60, 61, 
2, 5, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 21, 22, 27, 29, 32, 34, 35, 36, 37, 38, 41, 42, 46, 47, 51, 52, 53, 54, 57, 58, 60, 61, 62, 
3, 6, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 22, 23, 28, 30, 33, 35, 36, 37, 38, 39, 42, 43, 47, 48, 52, 53, 54, 55, 58, 59, 61, 62, 63, 
0, 4, 7, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 23, 24, 29, 31, 34, 36, 37, 38, 39, 40, 43, 44, 48, 49, 53, 54, 55, 56, 59, 60, 62, 63, 
0, 1, 5, 8, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 24, 25, 30, 32, 35, 37, 38, 39, 40, 41, 44, 45, 49, 50, 54, 55, 56, 57, 60, 61, 63, 
0, 1, 2, 6, 9, 11, 12, 13, 17, 18, 19, 20, 21, 22, 23, 25, 26, 31, 33, 36, 38, 39, 40, 41, 42, 45, 46, 50, 51, 55, 56, 57, 58, 61, 62, 
1, 2, 3, 7, 10, 12, 13, 14, 18, 19, 20, 21, 22, 23, 24, 26, 27, 32, 34, 37, 39, 40, 41, 42, 43, 46, 47, 51, 52, 56, 57, 58, 59, 62, 63, 
0, 2, 3, 4, 8, 11, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 27, 28, 33, 35, 38, 40, 41, 42, 43, 44, 47, 48, 52, 53, 57, 58, 59, 60, 63, 
0, 1, 3, 4, 5, 9, 12, 14, 15, 16, 20, 21, 22, 23, 24, 25, 26, 28, 29, 34, 36, 39, 41, 42, 43, 44, 45, 48, 49, 53, 54, 58, 59, 60, 61, 
1, 2, 4, 5, 6, 10, 13, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 29, 30, 35, 37, 40, 42, 43, 44, 45, 46, 49, 50, 54, 55, 59, 60, 61, 62, 
2, 3, 5, 6, 7, 11, 14, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 31, 36, 38, 41, 43, 44, 45, 46, 47, 50, 51, 55, 56, 60, 61, 62, 63, 
0, 3, 4, 6, 7, 8, 12, 15, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 31, 32, 37, 39, 42, 44, 45, 46, 47, 48, 51, 52, 56, 57, 61, 62, 63, 
0, 1, 4, 5, 7, 8, 9, 13, 16, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 32, 33, 38, 40, 43, 45, 46, 47, 48, 49, 52, 53, 57, 58, 62, 63, 
0, 1, 2, 5, 6, 8, 9, 10, 14, 17, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 34, 39, 41, 44, 46, 47, 48, 49, 50, 53, 54, 58, 59, 63, 
0, 1, 2, 3, 6, 7, 9, 10, 11, 15, 18, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 34, 35, 40, 42, 45, 47, 48, 49, 50, 51, 54, 55, 59, 60, 
1, 2, 3, 4, 7, 8, 10, 11, 12, 16, 19, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 35, 36, 41, 43, 46, 48, 49, 50, 51, 52, 55, 56, 60, 61, 
2, 3, 4, 5, 8, 9, 11, 12, 13, 17, 20, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 36, 37, 42, 44, 47, 49, 50, 51, 52, 53, 56, 57, 61, 62, 
3, 4, 5, 6, 9, 10, 12, 13, 14, 18, 21, 23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 37, 38, 43, 45, 48, 50, 51, 52, 53, 54, 57, 58, 62, 63, 
0, 4, 5, 6, 7, 10, 11, 13, 14, 15, 19, 22, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 38, 39, 44, 46, 49, 51, 52, 53, 54, 55, 58, 59, 63, 
0, 1, 5, 6, 7, 8, 11, 12, 14, 15, 16, 20, 23, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 39, 40, 45, 47, 50, 52, 53, 54, 55, 56, 59, 60, 
1, 2, 6, 7, 8, 9, 12, 13, 15, 16, 17, 21, 24, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 40, 41, 46, 48, 51, 53, 54, 55, 56, 57, 60, 61, 
2, 3, 7, 8, 9, 10, 13, 14, 16, 17, 18, 22, 25, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 41, 42, 47, 49, 52, 54, 55, 56, 57, 58, 61, 62, 
3, 4, 8, 9, 10, 11, 14, 15, 17, 18, 19, 23, 26, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 42, 43, 48, 50, 53, 55, 56, 57, 58, 59, 62, 63, 
0, 4, 5, 9, 10, 11, 12, 15, 16, 18, 19, 20, 24, 27, 29, 30, 31, 35, 36, 37, 38, 39, 40, 41, 43, 44, 49, 51, 54, 56, 57, 58, 59, 60, 63, 
0, 1, 5, 6, 10, 11, 12, 13, 16, 17, 19, 20, 21, 25, 28, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 44, 45, 50, 52, 55, 57, 58, 59, 60, 61, 
1, 2, 6, 7, 11, 12, 13, 14, 17, 18, 20, 21, 22, 26, 29, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 45, 46, 51, 53, 56, 58, 59, 60, 61, 62, 
2, 3, 7, 8, 12, 13, 14, 15, 18, 19, 21, 22, 23, 27, 30, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 46, 47, 52, 54, 57, 59, 60, 61, 62, 63, 
0, 3, 4, 8, 9, 13, 14, 15, 16, 19, 20, 22, 23, 24, 28, 31, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 55, 58, 60, 61, 62, 63, 
0, 1, 4, 5, 9, 10, 14, 15, 16, 17, 20, 21, 23, 24, 25, 29, 32, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 48, 49, 54, 56, 59, 61, 62, 63, 
0, 1, 2, 5, 6, 10, 11, 15, 16, 17, 18, 21, 22, 24, 25, 26, 30, 33, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 49, 50, 55, 57, 60, 62, 63, 
0, 1, 2, 3, 6, 7, 11, 12, 16, 17, 18, 19, 22, 23, 25, 26, 27, 31, 34, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 50, 51, 56, 58, 61, 63, 
0, 1, 2, 3, 4, 7, 8, 12, 13, 17, 18, 19, 20, 23, 24, 26, 27, 28, 32, 35, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 51, 52, 57, 59, 62, 
1, 2, 3, 4, 5, 8, 9, 13, 14, 18, 19, 20, 21, 24, 25, 27, 28, 29, 33, 36, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 52, 53, 58, 60, 63, 
0, 2, 3, 4, 5, 6, 9, 10, 14, 15, 19, 20, 21, 22, 25, 26, 28, 29, 30, 34, 37, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 53, 54, 59, 61, 
1, 3, 4, 5, 6, 7, 10, 11, 15, 16, 20, 21, 22, 23, 26, 27, 29, 30, 31, 35, 38, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 54, 55, 60, 62, 
2, 4, 5, 6, 7, 8, 11, 12, 16, 17, 21, 22, 23, 24, 27, 28, 30, 31, 32, 36, 39, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 55, 56, 61, 63, 
0, 3, 5, 6, 7, 8, 9, 12, 13, 17, 18, 22, 23, 24, 25, 28, 29, 31, 32, 33, 37, 40, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 56, 57, 62, 
1, 4, 6, 7, 8, 9, 10, 13, 14, 18, 19, 23, 24, 25, 26, 29, 30, 32, 33, 34, 38, 41, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 57, 58, 63, 
0, 2, 5, 7, 8, 9, 10, 11, 14, 15, 19, 20, 24, 25, 26, 27, 30, 31, 33, 34, 35, 39, 42, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 58, 59, 
1, 3, 6, 8, 9, 10, 11, 12, 15, 16, 20, 21, 25, 26, 27, 28, 31, 32, 34, 35, 36, 40, 43, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 59, 60, 
2, 4, 7, 9, 10, 11, 12, 13, 16, 17, 21, 22, 26, 27, 28, 29, 32, 33, 35, 36, 37, 41, 44, 46, 47, 48, 52, 53, 54, 55, 56, 57, 58, 60, 61, 
3, 5, 8, 10, 11, 12, 13, 14, 17, 18, 22, 23, 27, 28, 29, 30, 33, 34, 36, 37, 38, 42, 45, 47, 48, 49, 53, 54, 55, 56, 57, 58, 59, 61, 62, 
4, 6, 9, 11, 12, 13, 14, 15, 18, 19, 23, 24, 28, 29, 30, 31, 34, 35, 37, 38, 39, 43, 46, 48, 49, 50, 54, 55, 56, 57, 58, 59, 60, 62, 63, 
0, 5, 7, 10, 12, 13, 14, 15, 16, 19, 20, 24, 25, 29, 30, 31, 32, 35, 36, 38, 39, 40, 44, 47, 49, 50, 51, 55, 56, 57, 58, 59, 60, 61, 63, 
0, 1, 6, 8, 11, 13, 14, 15, 16, 17, 20, 21, 25, 26, 30, 31, 32, 33, 36, 37, 39, 40, 41, 45, 48, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 
1, 2, 7, 9, 12, 14, 15, 16, 17, 18, 21, 22, 26, 27, 31, 32, 33, 34, 37, 38, 40, 41, 42, 46, 49, 51, 52, 53, 57, 58, 59, 60, 61, 62, 63, 
0, 2, 3, 8, 10, 13, 15, 16, 17, 18, 19, 22, 23, 27, 28, 32, 33, 34, 35, 38, 39, 41, 42, 43, 47, 50, 52, 53, 54, 58, 59, 60, 61, 62, 63
]
);

% #############################################################################################################################################
% #############################################################################################################################################
% #############################################################################################################################################
%   ____                    _                _         _           __                _____  _   _ 
%  / ___| ___   _ __   ___ | |_  _ __  __ _ (_) _ __  | |_  ___   / _|  ___   _ __  | ____|| | | |
% | |    / _ \ | '_ \ / __|| __|| '__|/ _` || || '_ \ | __|/ __| | |_  / _ \ | '__| |  _|  | | | |
% | |___| (_) || | | |\__ \| |_ | |  | (_| || || | | || |_ \__ \ |  _|| (_) || |    | |___ | |_| |
%  \____|\___/ |_| |_||___/ \__||_|   \__,_||_||_| |_| \__||___/ |_|   \___/ |_|    |_____| \___/ 
% constraints for EU

array[0..RD, 0..4, 0..63] of var -1..1: xu;
array[0..(RD - 1), 0..4, 0..63] of var -1..1: yu;

% S-box layer
constraint forall(round in 0..(RD - 1), column in 0..63)
(
    sbox(xu[round, 0, column], xu[round, 1, column], xu[round, 2, column], xu[round, 3, column], xu[round, 4, column], 
         yu[round, 0, column], yu[round, 1, column], yu[round, 2, column], yu[round, 3, column], yu[round, 4, column])
);

% Diffusion layer
constraint forall(round in 0..(RD - 1), row in 0..4, column in 0..63)
(
    xor3(yu[round, row, column], yu[round, row, ((column - rotation_dictionary[row, 0] + 64) mod 64)], yu[round, row, ((column - rotation_dictionary[row, 1] + 64) mod 64)], 
         xu[round + 1, row, column])
);

constraint sum(i in 0..4, j in 0..63) (xu[0, i, j]) != 0;
% #############################################################################################################################################
% #############################################################################################################################################
% #############################################################################################################################################
%   ____                    _                _         _           __                _____  _     
%  / ___| ___   _ __   ___ | |_  _ __  __ _ (_) _ __  | |_  ___   / _|  ___   _ __  | ____|| |    
% | |    / _ \ | '_ \ / __|| __|| '__|/ _` || || '_ \ | __|/ __| | |_  / _ \ | '__| |  _|  | |    
% | |___| (_) || | | |\__ \| |_ | |  | (_| || || | | || |_ \__ \ |  _|| (_) || |    | |___ | |___ 
%  \____|\___/ |_| |_||___/ \__||_|   \__,_||_||_| |_| \__||___/ |_|   \___/ |_|    |_____||_____|
% constraints for EL

array[0..RD, 0..4, 0..63] of var -1..1: xl;
array[0..(RD - 1), 0..4, 0..63] of var -1..1: yl;

% skip the first s-box laye
% constraint forall(round in 0..0, row in 0..4, column in 0..63) (yl[round, row, column] = xl[round, row, column]);

% S-box layer
constraint forall(round in 0..(RD - 1), column in 0..63)
(
    sbox_inv(yl[round, 0, column], yl[round, 1, column], yl[round, 2, column], yl[round, 3, column], yl[round, 4, column], 
             xl[round, 0, column], xl[round, 1, column], xl[round, 2, column], xl[round, 3, column], xl[round, 4, column])
);

% Diffusion layer
constraint forall(round in 0..(RD - 2), column in 0..63)
(
    % model the matrix multiplication of the first state's row
    xor31(xl[round + 1, 0, inv_lin_state_row_0[column, 0]], xl[round + 1, 0, inv_lin_state_row_0[column, 1]], xl[round + 1, 0, inv_lin_state_row_0[column, 2]], 
          xl[round + 1, 0, inv_lin_state_row_0[column, 3]], xl[round + 1, 0, inv_lin_state_row_0[column, 4]], xl[round + 1, 0, inv_lin_state_row_0[column, 5]], 
          xl[round + 1, 0, inv_lin_state_row_0[column, 6]], xl[round + 1, 0, inv_lin_state_row_0[column, 7]], xl[round + 1, 0, inv_lin_state_row_0[column, 8]], 
          xl[round + 1, 0, inv_lin_state_row_0[column, 9]], xl[round + 1, 0, inv_lin_state_row_0[column, 10]], xl[round + 1, 0, inv_lin_state_row_0[column, 11]], 
          xl[round + 1, 0, inv_lin_state_row_0[column, 12]], xl[round + 1, 0, inv_lin_state_row_0[column, 13]], xl[round + 1, 0, inv_lin_state_row_0[column, 14]], 
          xl[round + 1, 0, inv_lin_state_row_0[column, 15]], xl[round + 1, 0, inv_lin_state_row_0[column, 16]], xl[round + 1, 0, inv_lin_state_row_0[column, 17]], 
          xl[round + 1, 0, inv_lin_state_row_0[column, 18]], xl[round + 1, 0, inv_lin_state_row_0[column, 19]], xl[round + 1, 0, inv_lin_state_row_0[column, 20]], 
          xl[round + 1, 0, inv_lin_state_row_0[column, 21]], xl[round + 1, 0, inv_lin_state_row_0[column, 22]], xl[round + 1, 0, inv_lin_state_row_0[column, 23]], 
          xl[round + 1, 0, inv_lin_state_row_0[column, 24]], xl[round + 1, 0, inv_lin_state_row_0[column, 25]], xl[round + 1, 0, inv_lin_state_row_0[column, 26]], 
          xl[round + 1, 0, inv_lin_state_row_0[column, 27]], xl[round + 1, 0, inv_lin_state_row_0[column, 28]], xl[round + 1, 0, inv_lin_state_row_0[column, 29]],
          xl[round + 1, 0, inv_lin_state_row_0[column, 30]], yl[round, 0, column])
    /\
    % model the matrix multiplication of the second state's row
    xor33(xl[round + 1, 1, inv_lin_state_row_1[column, 0]], xl[round + 1, 1, inv_lin_state_row_1[column, 1]], xl[round + 1, 1, inv_lin_state_row_1[column, 2]], 
          xl[round + 1, 1, inv_lin_state_row_1[column, 3]], xl[round + 1, 1, inv_lin_state_row_1[column, 4]], xl[round + 1, 1, inv_lin_state_row_1[column, 5]], 
          xl[round + 1, 1, inv_lin_state_row_1[column, 6]], xl[round + 1, 1, inv_lin_state_row_1[column, 7]], xl[round + 1, 1, inv_lin_state_row_1[column, 8]], 
          xl[round + 1, 1, inv_lin_state_row_1[column, 9]], xl[round + 1, 1, inv_lin_state_row_1[column, 10]], xl[round + 1, 1, inv_lin_state_row_1[column, 11]], 
          xl[round + 1, 1, inv_lin_state_row_1[column, 12]], xl[round + 1, 1, inv_lin_state_row_1[column, 13]], xl[round + 1, 1, inv_lin_state_row_1[column, 14]], 
          xl[round + 1, 1, inv_lin_state_row_1[column, 15]], xl[round + 1, 1, inv_lin_state_row_1[column, 16]], xl[round + 1, 1, inv_lin_state_row_1[column, 17]], 
          xl[round + 1, 1, inv_lin_state_row_1[column, 18]], xl[round + 1, 1, inv_lin_state_row_1[column, 19]], xl[round + 1, 1, inv_lin_state_row_1[column, 20]], 
          xl[round + 1, 1, inv_lin_state_row_1[column, 21]], xl[round + 1, 1, inv_lin_state_row_1[column, 22]], xl[round + 1, 1, inv_lin_state_row_1[column, 23]], 
          xl[round + 1, 1, inv_lin_state_row_1[column, 24]], xl[round + 1, 1, inv_lin_state_row_1[column, 25]], xl[round + 1, 1, inv_lin_state_row_1[column, 26]],
          xl[round + 1, 1, inv_lin_state_row_1[column, 27]], xl[round + 1, 1, inv_lin_state_row_1[column, 28]], xl[round + 1, 1, inv_lin_state_row_1[column, 29]],
          xl[round + 1, 1, inv_lin_state_row_1[column, 30]], xl[round + 1, 1, inv_lin_state_row_1[column, 31]], xl[round + 1, 1, inv_lin_state_row_1[column, 32]], 
          yl[round, 1, column])
    /\
    % model the matrix multiplication of the third state's row
    xor33(xl[round + 1, 2, inv_lin_state_row_2[column, 0]], xl[round + 1, 2, inv_lin_state_row_2[column, 1]], xl[round + 1, 2, inv_lin_state_row_2[column, 2]], 
          xl[round + 1, 2, inv_lin_state_row_2[column, 3]], xl[round + 1, 2, inv_lin_state_row_2[column, 4]], xl[round + 1, 2, inv_lin_state_row_2[column, 5]], 
          xl[round + 1, 2, inv_lin_state_row_2[column, 6]], xl[round + 1, 2, inv_lin_state_row_2[column, 7]], xl[round + 1, 2, inv_lin_state_row_2[column, 8]], 
          xl[round + 1, 2, inv_lin_state_row_2[column, 9]], xl[round + 1, 2, inv_lin_state_row_2[column, 10]], xl[round + 1, 2, inv_lin_state_row_2[column, 11]], 
          xl[round + 1, 2, inv_lin_state_row_2[column, 12]], xl[round + 1, 2, inv_lin_state_row_2[column, 13]], xl[round + 1, 2, inv_lin_state_row_2[column, 14]], 
          xl[round + 1, 2, inv_lin_state_row_2[column, 15]], xl[round + 1, 2, inv_lin_state_row_2[column, 16]], xl[round + 1, 2, inv_lin_state_row_2[column, 17]], 
          xl[round + 1, 2, inv_lin_state_row_2[column, 18]], xl[round + 1, 2, inv_lin_state_row_2[column, 19]], xl[round + 1, 2, inv_lin_state_row_2[column, 20]], 
          xl[round + 1, 2, inv_lin_state_row_2[column, 21]], xl[round + 1, 2, inv_lin_state_row_2[column, 22]], xl[round + 1, 2, inv_lin_state_row_2[column, 23]], 
          xl[round + 1, 2, inv_lin_state_row_2[column, 24]], xl[round + 1, 2, inv_lin_state_row_2[column, 25]], xl[round + 1, 2, inv_lin_state_row_2[column, 26]],
          xl[round + 1, 2, inv_lin_state_row_2[column, 27]], xl[round + 1, 2, inv_lin_state_row_2[column, 28]], xl[round + 1, 2, inv_lin_state_row_2[column, 29]],
          xl[round + 1, 2, inv_lin_state_row_2[column, 30]], xl[round + 1, 2, inv_lin_state_row_2[column, 31]], xl[round + 1, 2, inv_lin_state_row_2[column, 32]], 
          yl[round, 2, column])
    /\
    % model the matrix multiplication of the fourth state's row
    xor33(xl[round + 1, 3, inv_lin_state_row_3[column, 0]], xl[round + 1, 3, inv_lin_state_row_3[column, 1]], xl[round + 1, 3, inv_lin_state_row_3[column, 2]], 
          xl[round + 1, 3, inv_lin_state_row_3[column, 3]], xl[round + 1, 3, inv_lin_state_row_3[column, 4]], xl[round + 1, 3, inv_lin_state_row_3[column, 5]], 
          xl[round + 1, 3, inv_lin_state_row_3[column, 6]], xl[round + 1, 3, inv_lin_state_row_3[column, 7]], xl[round + 1, 3, inv_lin_state_row_3[column, 8]], 
          xl[round + 1, 3, inv_lin_state_row_3[column, 9]], xl[round + 1, 3, inv_lin_state_row_3[column, 10]], xl[round + 1, 3, inv_lin_state_row_3[column, 11]], 
          xl[round + 1, 3, inv_lin_state_row_3[column, 12]], xl[round + 1, 3, inv_lin_state_row_3[column, 13]], xl[round + 1, 3, inv_lin_state_row_3[column, 14]], 
          xl[round + 1, 3, inv_lin_state_row_3[column, 15]], xl[round + 1, 3, inv_lin_state_row_3[column, 16]], xl[round + 1, 3, inv_lin_state_row_3[column, 17]], 
          xl[round + 1, 3, inv_lin_state_row_3[column, 18]], xl[round + 1, 3, inv_lin_state_row_3[column, 19]], xl[round + 1, 3, inv_lin_state_row_3[column, 20]], 
          xl[round + 1, 3, inv_lin_state_row_3[column, 21]], xl[round + 1, 3, inv_lin_state_row_3[column, 22]], xl[round + 1, 3, inv_lin_state_row_3[column, 23]], 
          xl[round + 1, 3, inv_lin_state_row_3[column, 24]], xl[round + 1, 3, inv_lin_state_row_3[column, 25]], xl[round + 1, 3, inv_lin_state_row_3[column, 26]],
          xl[round + 1, 3, inv_lin_state_row_3[column, 27]], xl[round + 1, 3, inv_lin_state_row_3[column, 28]], xl[round + 1, 3, inv_lin_state_row_3[column, 29]],
          xl[round + 1, 3, inv_lin_state_row_3[column, 30]], xl[round + 1, 3, inv_lin_state_row_3[column, 31]], xl[round + 1, 3, inv_lin_state_row_3[column, 32]],
          yl[round, 3, column])
    /\
    % model the matrix multiplication of the fifth state's row
    xor35(xl[round + 1, 4, inv_lin_state_row_4[column, 0]], xl[round + 1, 4, inv_lin_state_row_4[column, 1]], xl[round + 1, 4, inv_lin_state_row_4[column, 2]], 
          xl[round + 1, 4, inv_lin_state_row_4[column, 3]], xl[round + 1, 4, inv_lin_state_row_4[column, 4]], xl[round + 1, 4, inv_lin_state_row_4[column, 5]], 
          xl[round + 1, 4, inv_lin_state_row_4[column, 6]], xl[round + 1, 4, inv_lin_state_row_4[column, 7]], xl[round + 1, 4, inv_lin_state_row_4[column, 8]], 
          xl[round + 1, 4, inv_lin_state_row_4[column, 9]], xl[round + 1, 4, inv_lin_state_row_4[column, 10]], xl[round + 1, 4, inv_lin_state_row_4[column, 11]], 
          xl[round + 1, 4, inv_lin_state_row_4[column, 12]], xl[round + 1, 4, inv_lin_state_row_4[column, 13]], xl[round + 1, 4, inv_lin_state_row_4[column, 14]], 
          xl[round + 1, 4, inv_lin_state_row_4[column, 15]], xl[round + 1, 4, inv_lin_state_row_4[column, 16]], xl[round + 1, 4, inv_lin_state_row_4[column, 17]], 
          xl[round + 1, 4, inv_lin_state_row_4[column, 18]], xl[round + 1, 4, inv_lin_state_row_4[column, 19]], xl[round + 1, 4, inv_lin_state_row_4[column, 20]], 
          xl[round + 1, 4, inv_lin_state_row_4[column, 21]], xl[round + 1, 4, inv_lin_state_row_4[column, 22]], xl[round + 1, 4, inv_lin_state_row_4[column, 23]], 
          xl[round + 1, 4, inv_lin_state_row_4[column, 24]], xl[round + 1, 4, inv_lin_state_row_4[column, 25]], xl[round + 1, 4, inv_lin_state_row_4[column, 26]],
          xl[round + 1, 4, inv_lin_state_row_4[column, 27]], xl[round + 1, 4, inv_lin_state_row_4[column, 28]], xl[round + 1, 4, inv_lin_state_row_4[column, 29]],
          xl[round + 1, 4, inv_lin_state_row_4[column, 30]], xl[round + 1, 4, inv_lin_state_row_4[column, 31]], xl[round + 1, 4, inv_lin_state_row_4[column, 32]],
          xl[round + 1, 4, inv_lin_state_row_4[column, 33]], xl[round + 1, 4, inv_lin_state_row_4[column, 34]], yl[round, 4, column])
);

% skip the last diffusion layer
constraint forall(row in 0..4, column in 0..63)
(
    yl[RD - 1, row, column] = xl[RD, row, column]
);

constraint sum(row in 0..4, column in 0..63)(xl[RD, row, column]) != 0;

% #############################################################################################################################################
% #############################################################################################################################################
% #############################################################################################################################################
%   ____                                   _                _    _              ____               _                    _  _        _    _               
%  / ___| _   _   __ _  _ __  __ _  _ __  | |_  ___   ___  | |_ | |__    ___   / ___| ___   _ __  | |_  _ __  __ _   __| |(_)  ___ | |_ (_)  ___   _ __  
% | |  _ | | | | / _` || '__|/ _` || '_ \ | __|/ _ \ / _ \ | __|| '_ \  / _ \ | |    / _ \ | '_ \ | __|| '__|/ _` | / _` || | / __|| __|| | / _ \ | '_ \ 
% | |_| || |_| || (_| || |  | (_| || | | || |_|  __/|  __/ | |_ | | | ||  __/ | |___| (_) || | | || |_ | |  | (_| || (_| || || (__ | |_ | || (_) || | | |
%  \____| \__,_| \__,_||_|   \__,_||_| |_| \__|\___| \___|  \__||_| |_| \___|  \____|\___/ |_| |_| \__||_|   \__,_| \__,_||_| \___| \__||_| \___/ |_| |_|
%                                                                                                                                        |___/                              
% constraints for the meeting point
array[0..RD, 0..4, 0..63] of var 0..1: contradict_x;
array[0..(RD - 1), 0..4, 0..63] of var 0..1: contradict_y;
constraint forall(round in 0..(RD - 1), row in 0..4, column in 0..63)
(
    contradict_y[round, row, column] = bool2int(yu[round, row, column] + yl[round, row, column] == 1)
);
constraint forall(round in 0..(RD - 1), row in 0..4, column in 0..63)
(
    contradict_x[round, row, column] = bool2int(xu[round, row, column] + xl[round, row, column] == 1)
);
constraint sum(round in 0..(RD - 1), row in 0..4, column in 0..63)(contradict_y[round, row, column] + contradict_x[round, row, column]) > 0;

var 0..320: num_non_fixed_input_bits; 
constraint num_non_fixed_input_bits = sum(i in 0..4, j in 0..63)(bool2int(xu[0, i, j] == -1));
var 0..320: num_non_fixed_output_bits; 
constraint num_non_fixed_output_bits = sum(i in 0..4, j in 0..63)(bool2int(xl[RD, i, j] == -1));

% #############################################################################################################################################
% #############################################################################################################################################
% #############################################################################################################################################
%  ____                           _       ____   _                _                      
% / ___|   ___   __ _  _ __  ___ | |__   / ___| | |_  _ __  __ _ | |_  ___   __ _  _   _ 
% \___ \  / _ \ / _` || '__|/ __|| '_ \  \___ \ | __|| '__|/ _` || __|/ _ \ / _` || | | |
%  ___) ||  __/| (_| || |  | (__ | | | |  ___) || |_ | |  | (_| || |_|  __/| (_| || |_| |
% |____/  \___| \__,_||_|   \___||_| |_| |____/  \__||_|   \__,_| \__|\___| \__, | \__, |
%                                                                           |___/  |___/ 
% Search strategy
ann: search_ann;
search_ann = seq_search([
    int_search([yl[RD - 1, 0, i] | i in 0..63], indomain_median, complete),
    int_search([yl[RD - 1, 1, i] | i in 0..63], indomain_median, complete),
    int_search([yl[RD - 1, 2, i] | i in 0..63], indomain_median, complete),
    int_search([yl[RD - 1, 3, i] | i in 0..63], indomain_median, complete),
    int_search([yl[RD - 1, 3, i] | i in 0..63], indomain_median, complete)]);

% #############################################################################################################################################
% #############################################################################################################################################
% #############################################################################################################################################
%  ____          _             
% / ___|   ___  | |__   __ ___ 
% \___ \  / _ \ | |\ \ / // _ \
%  ___) || (_) || | \ V /|  __/
% |____/  \___/ |_|  \_/  \___|

% some artificial constraints to control the input and output masks;
% constraint forall(row in 1..4, column in 0..63)(xl[RD, row, column] = 0);
% constraint forall(row in 1..4, column in 0..63)(yl[RD - 1, row, column] = 0);
% constraint sum(row in 0..0, column in 0..63)(yl[RD - 1, row, column]) = 1;
% constraint forall(row in 0..2, column in 0..63)(xu[0, row, column] = 0);



solve minimize sum(i in 0..4, j in 0..63)(xu[0, i, j] + xl[RD, i, j]);
% solve :: restart_constant(10000)
%       :: search_ann minimize sum(i in 0..4, j in 0..63)(xu[0, i, j]);

% #############################################################################################################################################
% #############################################################################################################################################
% #############################################################################################################################################

output [
    if i = 0 then "\n\n" else "" endif ++
    "xu_" ++ show(r) ++ "_" ++ show(i) ++ ": \"" ++
    join("", [if fix(xu[r, i, j]) = -1 then "?" else show(fix(xu[r, i, j])) endif | j in 0..63]) ++ "\"\n"
    | r in 0..RD, i in 0..4];

output ["\n"];
output [
    if i = 0 then "\n\n" else "" endif ++
    "xl_" ++ show(r) ++ "_" ++ show(i) ++ ": \"" ++
    join("", [if fix(xl[r, i, j]) = -1 then "?" else show(fix(xl[r, i, j])) endif | j in 0..63]) ++ "\"\n"
    | r in 0..RD, i in 0..4];

output ["\n\nNo non-fixed input bits: " ++ show(sum(i in 0..4, j in 0..63)(bool2int(xu[0, i, j] == -1 \/ xl[RD, i, j] == -1)))];

% #############################################################################################################################################
% #############################################################################################################################################
% #############################################################################################################################################
%     _                 _  _  _                       _____                     _    _                    
%    / \   _   _ __  __(_)| |(_)  __ _  _ __  _   _  |  ___|_   _  _ __    ___ | |_ (_)  ___   _ __   ___ 
%   / _ \ | | | |\ \/ /| || || | / _` || '__|| | | | | |_  | | | || '_ \  / __|| __|| | / _ \ | '_ \ / __|
%  / ___ \| |_| | >  < | || || || (_| || |   | |_| | |  _| | |_| || | | || (__ | |_ | || (_) || | | |\__ \
% /_/   \_\\__,_|/_/\_\|_||_||_| \__,_||_|    \__, | |_|    \__,_||_| |_| \___| \__||_| \___/ |_| |_||___/
%                                             |___/       
% auxiliary functions

predicate xor3(var -1..1: x0, var -1..1: x1, var -1..1: x2, var -1..1: y) = 
    if exists([x0 == -1, x1 == -1, x2 == -1]) then y = -1
    else y = (sum([x0, x1, x2]) mod 2) endif
;

predicate xor31(var -1..1: x0, var -1..1: x1, var -1..1: x2, var -1..1: x3, var -1..1: x4, var -1..1: x5, var -1..1: x6, var -1..1: x7, var -1..1: x8, var -1..1: x9, var -1..1: x10,
                var -1..1: x11, var -1..1: x12, var -1..1: x13, var -1..1: x14, var -1..1: x15, var -1..1: x16, var -1..1: x17, var -1..1: x18, var -1..1: x19, var -1..1: x20, 
                var -1..1: x21, var -1..1: x22, var -1..1: x23, var -1..1: x24, var -1..1: x25, var -1..1: x26, var -1..1: x27, var -1..1: x28, var -1..1: x29, var -1..1: x30, var -1..1: y) = 
    if exists([x0 == -1, x1 == -1, x2 == -1, x3 == -1, x4 == -1, x5 == -1, x6 == -1, x7 == -1, x8 == -1, x9 == -1, x10 == -1, x11 == -1, x12 == -1, x13 == -1, x14 == -1, x15 == -1, x16 == -1, 
               x17 == -1, x18 == -1, x19 == -1, x20 == -1, x21 == -1, x22 == -1, x23 == -1, x24 == -1, x25 == -1, x26 == -1, x27 == -1, x28 == -1, x29 == -1, x30 == -1]) then y = -1
    else y = (sum([x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, 
                  x21, x22, x23, x24, x25, x26, x27, x28, x29, x30]) mod 2) endif
;

predicate xor33(var -1..1: x0, var -1..1: x1, var -1..1: x2, var -1..1: x3, var -1..1: x4, var -1..1: x5, var -1..1: x6, var -1..1: x7, var -1..1: x8, var -1..1: x9, var -1..1: x10,
                var -1..1: x11, var -1..1: x12, var -1..1: x13, var -1..1: x14, var -1..1: x15, var -1..1: x16, var -1..1: x17, var -1..1: x18, var -1..1: x19, var -1..1: x20, 
                var -1..1: x21, var -1..1: x22, var -1..1: x23, var -1..1: x24, var -1..1: x25, var -1..1: x26, var -1..1: x27, var -1..1: x28, var -1..1: x29, var -1..1: x30, var -1..1: x31, 
                var -1..1: x32, var -1..1: y) = 
    if exists([x0 == -1, x1 == -1, x2 == -1, x3 == -1, x4 == -1, x5 == -1, x6 == -1, x7 == -1, x8 == -1, x9 == -1, x10 == -1, x11 == -1, x12 == -1, x13 == -1, x14 == -1, x15 == -1, x16 == -1, 
               x17 == -1, x18 == -1, x19 == -1, x20 == -1, x21 == -1, x22 == -1, x23 == -1, x24 == -1, x25 == -1, x26 == -1, x27 == -1, x28 == -1, x29 == -1, x30 == -1, x31 == -1, x32 == -1]) then y = -1
    else y = (sum([x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, 
                  x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32]) mod 2) endif
;

predicate xor35(var -1..1: x0, var -1..1: x1, var -1..1: x2, var -1..1: x3, var -1..1: x4, var -1..1: x5, var -1..1: x6, var -1..1: x7, var -1..1: x8, var -1..1: x9, var -1..1: x10,
                var -1..1: x11, var -1..1: x12, var -1..1: x13, var -1..1: x14, var -1..1: x15, var -1..1: x16, var -1..1: x17, var -1..1: x18, var -1..1: x19, var -1..1: x20, 
                var -1..1: x21, var -1..1: x22, var -1..1: x23, var -1..1: x24, var -1..1: x25, var -1..1: x26, var -1..1: x27, var -1..1: x28, var -1..1: x29, var -1..1: x30, var -1..1: x31, 
                var -1..1: x32, var -1..1: x33, var -1..1: x34, var -1..1: y) = 
    if exists([x0 == -1, x1 == -1, x2 == -1, x3 == -1, x4 == -1, x5 == -1, x6 == -1, x7 == -1, x8 == -1, x9 == -1, x10 == -1, x11 == -1, x12 == -1, x13 == -1, x14 == -1, x15 == -1, x16 == -1, 
               x17 == -1, x18 == -1, x19 == -1, x20 == -1, x21 == -1, x22 == -1, x23 == -1, x24 == -1, x25 == -1, x26 == -1, x27 == -1, x28 == -1, x29 == -1, x30 == -1, x31 == -1, x32 == -1, x33 == -1, 
               x34 == -1]) then y = -1
    else y = (sum([x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, 
                  x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34]) mod 2) endif
;

predicate sbox(var -1..1: x4, var -1..1: x3, var -1..1: x2, var -1..1: x1, var -1..1: x0, var -1..1: y4, var -1..1: y3, var -1..1: y2, var -1..1: y1, var -1..1: y0) = 
    if (x4 == 0 /\ x3 == 0 /\ x2 == 0 /\ x1 == 0 /\ x0 == 0) then (y4 == 0 /\ y3 == 0 /\ y2 == 0 /\ y1 == 0 /\ y0 == 0)
    elseif (x4 == 0 /\ x3 == 0 /\ x2 == 0 /\ x1 == 0 /\ x0 == 1) then (y4 == -1 /\ y3 == 1 /\ y2 == -1 /\ y1 == -1 /\ y0 == -1)
    elseif (x4 == 0 /\ x3 == 0 /\ x2 == 0 /\ x1 == 1 /\ x0 == 0) then (y4 == 1 /\ y3 == -1 /\ y2 == -1 /\ y1 == -1 /\ y0 == 1)
    elseif (x4 == 0 /\ x3 == 0 /\ x2 == 0 /\ x1 == 1 /\ x0 == 1) then (y4 == -1 /\ y3 == -1 /\ y2 == -1 /\ y1 == 0 /\ y0 == -1)
    elseif (x4 == 0 /\ x3 == 0 /\ x2 == 1 /\ x1 == 0 /\ x0 == 0) then (y4 == -1 /\ y3 == -1 /\ y2 == 1 /\ y1 == 1 /\ y0 == 0)
    elseif (x4 == 0 /\ x3 == 0 /\ x2 == 1 /\ x1 == 0 /\ x0 == 1) then (y4 == 1 /\ y3 == -1 /\ y2 == -1 /\ y1 == -1 /\ y0 == -1)
    elseif (x4 == 0 /\ x3 == 0 /\ x2 == 1 /\ x1 == 1 /\ x0 == 0) then (y4 == -1 /\ y3 == -1 /\ y2 == -1 /\ y1 == -1 /\ y0 == 1)
    elseif (x4 == 0 /\ x3 == 0 /\ x2 == 1 /\ x1 == 1 /\ x0 == 1) then (y4 == 0 /\ y3 == -1 /\ y2 == -1 /\ y1 == 1 /\ y0 == -1)
    elseif (x4 == 0 /\ x3 == 0 /\ x2 == -1 /\ x1 == 0 /\ x0 == 0) then (y4 == -1 /\ y3 == -1 /\ y2 == -1 /\ y1 == -1 /\ y0 == 0)
    elseif (x4 == 0 /\ x3 == 0 /\ x2 == -1 /\ x1 == 1 /\ x0 == 0) then (y4 == -1 /\ y3 == -1 /\ y2 == -1 /\ y1 == -1 /\ y0 == 1)
    elseif (x4 == 0 /\ x3 == 1 /\ x2 == 0 /\ x1 == 0 /\ x0 == 0) then (y4 == -1 /\ y3 == -1 /\ y2 == 1 /\ y1 == 1 /\ y0 == -1)
    elseif (x4 == 0 /\ x3 == 1 /\ x2 == 0 /\ x1 == 1 /\ x0 == 1) then (y4 == -1 /\ y3 == -1 /\ y2 == -1 /\ y1 == 1 /\ y0 == -1)
    elseif (x4 == 0 /\ x3 == 1 /\ x2 == 1 /\ x1 == 0 /\ x0 == 0) then (y4 == -1 /\ y3 == -1 /\ y2 == 0 /\ y1 == 0 /\ y0 == -1)
    elseif (x4 == 0 /\ x3 == 1 /\ x2 == 1 /\ x1 == 1 /\ x0 == 0) then (y4 == -1 /\ y3 == 0 /\ y2 == -1 /\ y1 == -1 /\ y0 == -1)
    elseif (x4 == 0 /\ x3 == 1 /\ x2 == 1 /\ x1 == 1 /\ x0 == 1) then (y4 == -1 /\ y3 == 1 /\ y2 == -1 /\ y1 == 0 /\ y0 == -1)
    elseif (x4 == 1 /\ x3 == 0 /\ x2 == 0 /\ x1 == 0 /\ x0 == 0) then (y4 == -1 /\ y3 == 1 /\ y2 == 0 /\ y1 == -1 /\ y0 == -1)
    elseif (x4 == 1 /\ x3 == 0 /\ x2 == 0 /\ x1 == 0 /\ x0 == 1) then (y4 == 1 /\ y3 == 0 /\ y2 == -1 /\ y1 == -1 /\ y0 == 1)
    elseif (x4 == 1 /\ x3 == 0 /\ x2 == 0 /\ x1 == 1 /\ x0 == 1) then (y4 == 0 /\ y3 == -1 /\ y2 == -1 /\ y1 == -1 /\ y0 == 0)
    elseif (x4 == 1 /\ x3 == 0 /\ x2 == 1 /\ x1 == 0 /\ x0 == 0) then (y4 == 0 /\ y3 == -1 /\ y2 == 1 /\ y1 == -1 /\ y0 == -1)
    elseif (x4 == 1 /\ x3 == 0 /\ x2 == 1 /\ x1 == 0 /\ x0 == 1) then (y4 == -1 /\ y3 == -1 /\ y2 == -1 /\ y1 == -1 /\ y0 == 1)
    elseif (x4 == 1 /\ x3 == 0 /\ x2 == 1 /\ x1 == 1 /\ x0 == 0) then (y4 == 1 /\ y3 == -1 /\ y2 == -1 /\ y1 == -1 /\ y0 == -1)
    elseif (x4 == 1 /\ x3 == 0 /\ x2 == 1 /\ x1 == 1 /\ x0 == 1) then (y4 == -1 /\ y3 == -1 /\ y2 == -1 /\ y1 == -1 /\ y0 == 0)
    elseif (x4 == 1 /\ x3 == 0 /\ x2 == -1 /\ x1 == 0 /\ x0 == 1) then (y4 == -1 /\ y3 == -1 /\ y2 == -1 /\ y1 == -1 /\ y0 == 1)
    elseif (x4 == 1 /\ x3 == 0 /\ x2 == -1 /\ x1 == 1 /\ x0 == 1) then (y4 == -1 /\ y3 == -1 /\ y2 == -1 /\ y1 == -1 /\ y0 == 0)
    elseif (x4 == 1 /\ x3 == 1 /\ x2 == 0 /\ x1 == 0 /\ x0 == 0) then (y4 == -1 /\ y3 == -1 /\ y2 == 1 /\ y1 == -1 /\ y0 == -1)
    elseif (x4 == 1 /\ x3 == 1 /\ x2 == 1 /\ x1 == 0 /\ x0 == 0) then (y4 == -1 /\ y3 == -1 /\ y2 == 0 /\ y1 == -1 /\ y0 == -1)
    elseif (x4 == 1 /\ x3 == 1 /\ x2 == 1 /\ x1 == 1 /\ x0 == 0) then (y4 == -1 /\ y3 == 1 /\ y2 == -1 /\ y1 == -1 /\ y0 == -1)
    elseif (x4 == 1 /\ x3 == 1 /\ x2 == 1 /\ x1 == 1 /\ x0 == 1) then (y4 == -1 /\ y3 == 0 /\ y2 == -1 /\ y1 == -1 /\ y0 == -1)
    elseif (x4 == -1 /\ x3 == 0 /\ x2 == 0 /\ x1 == 0 /\ x0 == 0) then (y4 == -1 /\ y3 == -1 /\ y2 == 0 /\ y1 == -1 /\ y0 == -1)
    elseif (x4 == -1 /\ x3 == 0 /\ x2 == 1 /\ x1 == 0 /\ x0 == 0) then (y4 == -1 /\ y3 == -1 /\ y2 == 1 /\ y1 == -1 /\ y0 == -1)
    elseif (x4 == -1 /\ x3 == 1 /\ x2 == 0 /\ x1 == 0 /\ x0 == 0) then (y4 == -1 /\ y3 == -1 /\ y2 == 1 /\ y1 == -1 /\ y0 == -1)
    elseif (x4 == -1 /\ x3 == 1 /\ x2 == 1 /\ x1 == 0 /\ x0 == 0) then (y4 == -1 /\ y3 == -1 /\ y2 == 0 /\ y1 == -1 /\ y0 == -1)
    else (y4 = -1 /\ y3 = -1 /\ y2 = -1 /\ y1 = -1 /\ y0 = -1)
    endif
;

predicate sbox_inv(var -1..1: x4, var -1..1: x3, var -1..1: x2, var -1..1: x1, var -1..1: x0, var -1..1: y4, var -1..1: y3, var -1..1: y2, var -1..1: y1, var -1..1: y0) = 
    if (x4 == 0 /\ x3 == 0 /\ x2 == 0 /\ x1 == 0 /\ x0 == 0) then (y4 == 0 /\ y3 == 0 /\ y2 == 0 /\ y1 == 0 /\ y0 == 0)
    elseif (x4 == 0 /\ x3 == 0 /\ x2 == 0 /\ x1 == 1 /\ x0 == 0) then (y4 == -1 /\ y3 == -1 /\ y2 == -1 /\ y1 == 1 /\ y0 == -1)
    elseif (x4 == 0 /\ x3 == 1 /\ x2 == 0 /\ x1 == 0 /\ x0 == 0) then (y4 == -1 /\ y3 == 1 /\ y2 == -1 /\ y1 == -1 /\ y0 == -1)
    else (y4 = -1 /\ y3 = -1 /\ y2 = -1 /\ y1 = -1 /\ y0 = -1)
    endif
;